(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{475:function(t,v,_){"use strict";_.r(v);var e=_(14),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http-请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-请求"}},[t._v("#")]),t._v(" HTTP 请求")]),t._v(" "),_("p",[_("img",{attrs:{src:"/blog/images/javascript/http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%951.png",alt:"http请求1"}})]),t._v(" "),_("h3",{attrs:{id:"get"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" GET")]),t._v(" "),_("p",[t._v("GET 请求指定资源的表示。请求使用GET只应检索数据。")]),t._v(" "),_("h3",{attrs:{id:"post"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" POST")]),t._v(" "),_("p",[t._v("POST 将数据发送到服务器。请求主体的类型由 Content-Type 标头指示。")]),t._v(" "),_("h3",{attrs:{id:"put"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" PUT")]),t._v(" "),_("p",[t._v("PUT 请求方法创建新的资源或替换请求负载目标资源的表示。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("POST 与 PUT 区别")]),t._v(" "),_("p",[t._v("PUT 是幂等：调用它一次或多次连续具有相同的效果（也就是没有侧面的效果），在那里连续的相同的POST可具有额外的效果，如通过顺序数次。")])]),t._v(" "),_("h3",{attrs:{id:"delete"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" DELETE")]),t._v(" "),_("p",[t._v("DELETE 请求方法删除指定的资源。")]),t._v(" "),_("h3",{attrs:{id:"options"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" OPTIONS")]),t._v(" "),_("p",[t._v("OPTIONS 用于描述目标资源的通讯选择。客户端可以为 OPTIONS 方法指定一个特定的 URL，或者指定一个星号（*）来引用整个服务器。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("什么是 OPTIONS")]),t._v(" "),_("p",[t._v("是浏览器对复杂跨域请求的一种处理方式，在真正发送请求之前，会先进行一次预检请求，就是我们刚刚说到的参数为 OPTIONS 的第一次请求，作用是用于试探服务端是否能接受真正的请求。如果 OPTIONS 获得的回应时拒绝性质的，如 404、403、500 等状态，就会停止 post、get 请求的发出。产生条件如下：")]),t._v(" "),_("ul",[_("li",[t._v("请求的方法不是 GET/HEAD/POST")]),t._v(" "),_("li",[t._v("POST 请求的 Content-Type 并非 application/x-www-form-urlencoded, multipart/form-data, 或text/plain")]),t._v(" "),_("li",[t._v("请求设置了自定义的 header 字段")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("成功是否有身体")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("是否安全")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("是否幂等")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("是否可缓存")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("在表单中是否允许")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("GET")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("POST")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("新鲜度")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("PUT")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("DELETE")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")])])])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("幂等与安全")]),t._v(" "),_("p",[_("strong",[t._v("安全")]),t._v("： 就是不会出现 "),_("strong",[t._v("脏读")]),t._v("，"),_("strong",[t._v("幻读")]),t._v("，"),_("strong",[t._v("不可重复读")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("幂等")]),t._v("： 就是在操作成功的前提条件下，会不会对数据库造成额外的影响。")])]),t._v(" "),_("h3",{attrs:{id:"简单请求与非简单请求-复杂请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单请求与非简单请求-复杂请求"}},[t._v("#")]),t._v(" 简单请求与非简单请求(复杂请求)")]),t._v(" "),_("p",[_("img",{attrs:{src:"/blog/images/javascript/http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%952.png",alt:"http请求2"}})]),t._v(" "),_("p",[_("strong",[t._v("简单请求")]),t._v(" 就是会直接发送请求，而复杂请求则会在发送真正的请求之前发一次 OPTIONS 预检请求，来试探服务器是否能够接收真正的请求，MDN 对 OPTIONS 预检请求的释义为检测服务器所支持的请求方法。")]),t._v(" "),_("p",[_("strong",[t._v("简单请求")]),t._v(" 符合如下两个条件：")]),t._v(" "),_("ul",[_("li",[t._v("请求方式：GET、POST、HEAD，即HTTP1.0提供的三种请求方法")]),t._v(" "),_("li",[t._v("HTTP 头部信息不超过一下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type（只有三个值application/x-www-form-urlencoded、multipart/form-data、text/plain）")])]),t._v(" "),_("p",[_("strong",[t._v("复杂请求")]),t._v(" 则符合如下几个条件之一：")]),t._v(" "),_("ul",[_("li",[t._v("请求方式：PUT、DELETE")]),t._v(" "),_("li",[t._v("自定义头部字段")]),t._v(" "),_("li",[t._v("发送 json 格式数据")])]),t._v(" "),_("h3",{attrs:{id:"get-和-post-的联系和区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的联系和区别"}},[t._v("#")]),t._v(" GET 和 POST 的联系和区别")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("区别")]),t._v(" "),_("th",[t._v("GET")]),t._v(" "),_("th",[t._v("POST")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("传输长度")]),t._v(" "),_("td",[t._v("长度限制（受限于url长度），一般2KB")]),t._v(" "),_("td",[t._v("post无限制")])]),t._v(" "),_("tr",[_("td",[t._v("传输方式")]),t._v(" "),_("td",[t._v("地址栏传输")]),t._v(" "),_("td",[t._v("报文传输")])]),t._v(" "),_("tr",[_("td",[t._v("用途")]),t._v(" "),_("td",[t._v("查询")]),t._v(" "),_("td",[t._v("增删改数据")])]),t._v(" "),_("tr",[_("td",[t._v("数据包数量")]),t._v(" "),_("td",[t._v("一个TCP数据包")]),t._v(" "),_("td",[t._v("两个TCP数据包")])]),t._v(" "),_("tr",[_("td",[t._v("安全性")]),t._v(" "),_("td",[t._v("不安全")]),t._v(" "),_("td",[t._v("相对安全")])]),t._v(" "),_("tr",[_("td",[t._v("回退")]),t._v(" "),_("td",[t._v("在浏览器回退时是无害的")]),t._v(" "),_("td",[t._v("POST会再次提交请求")])]),t._v(" "),_("tr",[_("td",[t._v("缓存")]),t._v(" "),_("td",[t._v("会被浏览器主动缓存")]),t._v(" "),_("td",[t._v("不会被主动缓存")])]),t._v(" "),_("tr",[_("td",[t._v("历史记录")]),t._v(" "),_("td",[t._v("会被完整保留在浏览器历史记录里")]),t._v(" "),_("td",[t._v("不会保留")])]),t._v(" "),_("tr",[_("td",[t._v("参数类型")]),t._v(" "),_("td",[t._v("只接受ASCII字符")]),t._v(" "),_("td",[t._v("无限制")])]),t._v(" "),_("tr",[_("td",[t._v("编码")]),t._v(" "),_("td",[t._v("只能URL编码")]),t._v(" "),_("td",[t._v("POST支持多种编码方式")])])])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),_("p",[t._v("并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。")])]),t._v(" "),_("h2",{attrs:{id:"restful-风格"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful-风格"}},[t._v("#")]),t._v(" RESTful 风格")]),t._v(" "),_("p",[t._v("表现层状态转化。")]),t._v(" "),_("p",[t._v('HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"（State Transfer）。而这种转化是建立在表现层之上的，所以就是"表现层状态转化"。')]),t._v(" "),_("p",[t._v('在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的"集合"（collection），所以 API 中的名词也应该使用复数。')]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("什么是 RESTful 架构：")]),t._v(" "),_("ul",[_("li",[t._v("每一个URI代表一种资源")]),t._v(" "),_("li",[t._v("客户端和服务器之间，传递这种资源的某种表现层")]),t._v(" "),_("li",[t._v('客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"')])])]),t._v(" "),_("h3",{attrs:{id:"restful-常用-http-动词"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful-常用-http-动词"}},[t._v("#")]),t._v(" RESTful 常用 HTTP 动词")]),t._v(" "),_("ul",[_("li",[t._v("GET（SELECT）：从服务器取出资源（一项或多项）。")]),t._v(" "),_("li",[t._v("POST（CREATE）：在服务器新建一个资源。")]),t._v(" "),_("li",[t._v("PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。")]),t._v(" "),_("li",[t._v("PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。")]),t._v(" "),_("li",[t._v("DELETE（DELETE）：从服务器删除资源。")]),t._v(" "),_("li",[t._v("HEAD：获取资源的元数据。")]),t._v(" "),_("li",[t._v("OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。")])]),t._v(" "),_("h3",{attrs:{id:"restful-常见-状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful-常见-状态码"}},[t._v("#")]),t._v(" RESTful 常见 状态码")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。")])]),t._v(" "),_("li",[_("p",[t._v("201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。")])]),t._v(" "),_("li",[_("p",[t._v("202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）")])]),t._v(" "),_("li",[_("p",[t._v("204 NO CONTENT - [DELETE]：用户删除数据成功。")])]),t._v(" "),_("li",[_("p",[t._v("400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。")])]),t._v(" "),_("li",[_("p",[t._v("401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。")])]),t._v(" "),_("li",[_("p",[t._v("403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。")])]),t._v(" "),_("li",[_("p",[t._v("404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。")])]),t._v(" "),_("li",[_("p",[t._v("406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。")])]),t._v(" "),_("li",[_("p",[t._v("410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。")])]),t._v(" "),_("li",[_("p",[t._v("422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。")])]),t._v(" "),_("li",[_("p",[t._v("500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。")])])]),t._v(" "),_("h3",{attrs:{id:"返回结果"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#返回结果"}},[t._v("#")]),t._v(" 返回结果")]),t._v(" "),_("ul",[_("li",[t._v("GET /collection：返回资源对象的列表（数组）")]),t._v(" "),_("li",[t._v("GET /collection/resource：返回单个资源对象")]),t._v(" "),_("li",[t._v("POST /collection：返回新生成的资源对象")]),t._v(" "),_("li",[t._v("PUT /collection/resource：返回完整的资源对象")]),t._v(" "),_("li",[t._v("PATCH /collection/resource：返回完整的资源对象")]),t._v(" "),_("li",[t._v("DELETE /collection/resource：返回一个空文档")])]),t._v(" "),_("h2",{attrs:{id:"graphql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[t._v("#")]),t._v(" GraphQL")]),t._v(" "),_("p",[t._v("GraphQL 是一种面向数据的 API 查询风格。GraphQL 规范，让前端自己描述自己希望的数据形式，服务端则返回前端所描述的数据结构。")]),t._v(" "),_("p",[t._v("GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。")]),t._v(" "),_("ul",[_("li",[t._v("多终端的出现，APP、小程序、PC端都需要相同的接口，但是又略有差异，常规接口需要提供几套，GraphQL 的话只需要写好查询语句即可")]),t._v(" "),_("li",[t._v("天生的聚合接口，以前一个页面需要请求不同的数据，我们可以请求多个接口，我们可以让服务端进行聚合，有了 GraphQL 后我们可以自己去聚合想要的数据")]),t._v(" "),_("li",[t._v("不用被版本困扰，之前写接口的时候为了兼容老的项目可以正常被访问，尤其是 APP，线上的项目，我们接口肯定是不能影响线上的，所以有比较大的改变的时候，只能升级版本，有了 GraphQL 后就无需关心版本问题了，接口还是那个接口查询语句变一下就好了")]),t._v(" "),_("li",[t._v("迁移很简单，服务端在之前的接口上稍加改造就好，前端写查询语句")])])])}),[],!1,null,null,null);v.default=a.exports}}]);