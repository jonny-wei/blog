(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{552:function(t,e,c){"use strict";c.r(e);var s=c(14),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[c("h1",{attrs:{id:"计算属性与侦听器"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#计算属性与侦听器"}},[t._v("#")]),t._v(" 计算属性与侦听器")]),t._v(" "),c("ul",[c("li",[t._v("computed：计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值。当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算。")]),t._v(" "),c("li",[t._v("watch：侦听器，侦听属性，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作。当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])]),t._v(" "),c("div",{staticClass:"custom-block tip"},[c("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),c("p",[t._v("注意，不应该使用箭头函数来定义 watcher 函数 (例如 "),c("code",[t._v("searchQuery: newValue => this.updateAutocomplete(newValue)")]),t._v(")。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，"),c("code",[t._v("this.updateAutocomplete")]),t._v(" 将是 undefined。")])]),t._v(" "),c("p",[t._v("动态组件 & 异步组件")]),t._v(" "),c("p",[t._v("路由懒加载原理")]),t._v(" "),c("p",[t._v("slot原理")])])}),[],!1,null,null,null);e.default=o.exports}}]);