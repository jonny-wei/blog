(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{572:function(s,t,n){"use strict";n.r(t);var a=n(15),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"render-阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render-阶段"}},[s._v("#")]),s._v(" Render 阶段")]),s._v(" "),n("h2",{attrs:{id:"流程概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程概述"}},[s._v("#")]),s._v(" 流程概述")]),s._v(" "),n("p",[s._v("当组件更新，本质上是从 fiberRoot 开始深度调和 fiber 树。render 阶段的核心就是如何"),n("strong",[s._v("创建 Fiber Node")]),s._v(" 以及 "),n("strong",[s._v("构建 Fiber Tree")]),s._v("。render 阶段开始于 "),n("code",[s._v("performSyncWorkOnRoot")]),s._v(" 或 "),n("code",[s._v("performConcurrentWorkOnRoot")]),s._v("方法的调用。这取决于本次更新是同步更新还是异步更新。这两个方法中会调用如下两个方法：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// performSyncWorkOnRoot会调用该方法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoopSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// performConcurrentWorkOnRoot会调用该方法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoopConcurrent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("shouldYield")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("可以看到，他们唯一的区别是是否调用"),n("code",[s._v("shouldYield")]),s._v("。如果当前浏览器帧没有剩余时间，"),n("code",[s._v("shouldYield")]),s._v("会中止循环，直到浏览器有空闲时间后再继续遍历。")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("workInProgress")]),s._v("代表当前已创建的"),n("code",[s._v("workInProgress fiber")]),s._v("。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("performUnitOfWork")]),s._v("方法会创建下一个"),n("code",[s._v("Fiber节点")]),s._v("并赋值给"),n("code",[s._v("workInProgress")]),s._v("，并将"),n("code",[s._v("workInProgress")]),s._v("与已创建的"),n("code",[s._v("Fiber节点")]),s._v("连接起来构成"),n("code",[s._v("Fiber树")]),s._v("。")])])]),s._v(" "),n("p",[n("code",[s._v("Fiber Reconciler")]),s._v("是从"),n("code",[s._v("Stack Reconciler")]),s._v("重构而来，通过遍历的方式实现可中断的递归，所以"),n("code",[s._v("performUnitOfWork")]),s._v("的工作可以分为两部分：“递”和“归”。")]),s._v(" "),n("h4",{attrs:{id:"递-阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递-阶段"}},[s._v("#")]),s._v(" “递”阶段")]),s._v(" "),n("p",[s._v("首先从"),n("code",[s._v("rootFiber")]),s._v("开始向下深度优先遍历。为遍历到的每个"),n("code",[s._v("Fiber节点")]),s._v("调用 "),n("strong",[s._v("beginWork方法")]),s._v("。该方法会根据传入的"),n("code",[s._v("Fiber节点")]),s._v("创建"),n("code",[s._v("子Fiber节点")]),s._v("，并将这两个"),n("code",[s._v("Fiber节点")]),s._v("连接起来。")]),s._v(" "),n("p",[s._v("当遍历到叶子节点（即没有子组件的组件）时就会进入“归”阶段。")]),s._v(" "),n("h4",{attrs:{id:"归-阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归-阶段"}},[s._v("#")]),s._v(" “归”阶段")]),s._v(" "),n("p",[s._v("在“归”阶段会调用 "),n("strong",[s._v("completeWork 方法")]),s._v(" 处理"),n("code",[s._v("Fiber节点")]),s._v("。当某个"),n("code",[s._v("Fiber节点")]),s._v("执行完"),n("code",[s._v("completeWork")]),s._v("，如果其存在"),n("code",[s._v("兄弟Fiber节点")]),s._v("（即"),n("code",[s._v("fiber.sibling !== null")]),s._v("），会进入其"),n("code",[s._v("兄弟Fiber")]),s._v("的“递”阶段。如果不存在"),n("code",[s._v("兄弟Fiber")]),s._v("，会进入"),n("code",[s._v("父级Fiber")]),s._v("的“归”阶段。")]),s._v(" "),n("p",[s._v("“递”和“归”阶段会交错执行直到“归”到"),n("code",[s._v("rootFiber")]),s._v("。至此，"),n("code",[s._v("render阶段")]),s._v("的工作就结束了。")]),s._v(" "),n("ul",[n("li",[s._v("组件 A 触发 "),n("code",[s._v("setState")]),s._v(" 或者 "),n("code",[s._v("useState")]),s._v(" 更新视图，既然 "),n("code",[s._v("fiber")]),s._v(" 是从 root 开始更新，那么如何找到对应的 A 并 rerender 的呢？")]),s._v(" "),n("li",[s._v("组件类型 fiber 进行 "),n("code",[s._v("beginWork")]),s._v(" 就一定会进行 "),n("code",[s._v("render")]),s._v(" 吗？")])]),s._v(" "),n("h2",{attrs:{id:"最小更新单元-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最小更新单元-state"}},[s._v("#")]),s._v(" 最小更新单元 State")]),s._v(" "),n("p",[s._v("虽然在 React V18 引入订阅外部数据源的 "),n("code",[s._v("useMutableSource")]),s._v("。但在当前版本的 React 中，视图的更新基本都来源于内部 state 的改变。如果有一个组件 A ，如果想要它更新，那么场景有如下情况：")]),s._v(" "),n("ul",[n("li",[s._v("组件本身改变 "),n("code",[s._v("state")]),s._v(" 。函数 "),n("code",[s._v("useState")]),s._v(" | "),n("code",[s._v("useReducer")]),s._v(" ，类组件 "),n("code",[s._v("setState")]),s._v(" | "),n("code",[s._v("forceUpdate")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("props")]),s._v(" 改变，由组件更新带来的子组件的更新。")]),s._v(" "),n("li",[n("code",[s._v("context")]),s._v("更新，并且该组件消费了当前 "),n("code",[s._v("context")]),s._v(" 。")])]),s._v(" "),n("p",[s._v("无论是上面哪种方式，本质上都是 state 的变化。")]),s._v(" "),n("ul",[n("li",[s._v("props 改变来源于父级组件的 state 变化。")]),s._v(" "),n("li",[s._v("context 变化来源于 "),n("code",[s._v("Provider")]),s._v(" 中 value 变化，而 value 一般情况下也是 state 或者是 state 衍生产物。")])]),s._v(" "),n("p",[n("code",[s._v("state")]),s._v(" 改变是在组件对应的 fiber 单位上的，之前的 fiber 章节讲到了在 React 的世界里会存在多种多样的 fiber 类型， 而开发者平时使用的组件 "),n("code",[s._v("function Component")]),s._v(" 或者 "),n("code",[s._v("Class Component")]),s._v(" 也是两种不同的 fiber 类型。而且 React 底层对它们的处理逻辑也不相同。")]),s._v(" "),n("ul",[n("li",[s._v("比如更新类组件用的是 "),n("code",[s._v("updateClassComponent")]),s._v("，它做的事情是初始化时候实例化类组件，更新的话那么直接调用 render 得到新的 "),n("code",[s._v("children")]),s._v(" ；")]),s._v(" "),n("li",[s._v("更新函数组件用的是 "),n("code",[s._v("updateFunctionComponent")]),s._v("，里面调用 "),n("code",[s._v("renderWithHooks")]),s._v(" 执行函数组件并依次调用 "),n("code",[s._v("hooks")]),s._v("。")])]),s._v(" "),n("p",[s._v("那么在整个 "),n("code",[s._v("React")]),s._v(" 系统中，能够更新 state 的基本都在组件层面上，换句话说只有组件才能出发更新，比如 "),n("code",[s._v("div")]),s._v(" 元素 hostComponent 类型的 fiber，它是无法独立的自我更新的，只能依赖于父类的组件更新 state ，但是在调和阶段，它也会作为一个任务单元进入到 workLoop 中 ；综上所述，可以这么理解")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("fiber是调和过程中的最小单元，每一个需要调和的 fiber 都会进入 workLoop 中。")])]),s._v(" "),n("li",[n("strong",[s._v("而组件是最小的更新单元，React 的更新源于数据层 state 的变化。")])])]),s._v(" "),n("h2",{attrs:{id:"调度任务的初始化工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调度任务的初始化工作"}},[s._v("#")]),s._v(" 调度任务的初始化工作")]),s._v(" "),n("p",[s._v("以组件类型的 fiber 调和流程来理解组件更新流程。类组件在 render 阶段的一个重要作用就是产生新的 children ，也就是我们常说的 rerender。只有产生新的 children ，接下来才能深度遍历 children ，改变视图。每一个需要调和的 fiber 都要经历一个过程叫做 beginWork ，在 beginWork 流程中将执行上述各种 fiber 的更新函数。")]),s._v(" "),n("p",[s._v("那么对于组件类型 fiber 说，进入到 workLoop 中，那么一定会 "),n("code",[s._v("rerender")]),s._v(" 吗？ 答案是否定的，解析来看几种情况。")]),s._v(" "),n("p",[s._v("主要看一下如下 demo ：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 子组件2 */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Child2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("子组件 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 子组件1 */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Child1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" setNumber "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("useState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        子组件 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("button onClick"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setNumber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("按钮"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("button"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n     "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 父组件 */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" setNumber "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("useState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("父组件 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Child1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Child2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("button onClick"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setNumber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("按钮"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("button"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[n("strong",[s._v("场景一")]),s._v("：如上 demo 中，当点击 "),n("code",[s._v("Child1")]),s._v(" 的 "),n("strong",[s._v("按钮1")]),s._v(" 的时候，Child1 会渲染，那么 Child1 自然会进入到 "),n("code",[s._v("beginWork")]),s._v(" 流程中，那么疑问来了：")]),s._v(" "),n("ul",[n("li",[s._v("问题一：父组件 "),n("code",[s._v("Index")]),s._v(" 没有更新，会 rerender 吗？那么有会进入 "),n("code",[s._v("beginWork")]),s._v(" 流程吗 ？")]),s._v(" "),n("li",[s._v("问题二："),n("code",[s._v("Child2")]),s._v(" 会进入 "),n("code",[s._v("beginWork")]),s._v("流程吗 ？")]),s._v(" "),n("li",[s._v("问题三：如果 "),n("code",[s._v("Index")]),s._v(" 会 "),n("code",[s._v("beginWork")]),s._v("，那么 React 从 Root fiber 开始调和的时候，是如何找到更新的事发点 Index 的呢？")])]),s._v(" "),n("p",[n("strong",[s._v("场景二")]),s._v("：在如上 demo 中，当点击 Index 中的 "),n("strong",[s._v("按钮2")]),s._v(" 的时候：")]),s._v(" "),n("ul",[n("li",[s._v("问题四："),n("code",[s._v("Index")]),s._v(" 因为本身的 "),n("code",[s._v("state")]),s._v(" 改变会更新，那么 "),n("code",[s._v("Child1")]),s._v(" 和 "),n("code",[s._v("Child2")]),s._v(" 为什么会跟着更新。")])]),s._v(" "),n("p",[s._v("接下来我们开始以一次更新开始，分析调和过程中 beginWork 流程。")]),s._v(" "),n("p",[s._v("在正式流程分析之前，先来看一下 v17 引出的新的概念，在 v16 版本，任务的优先级用 expirationTime 表示，在 v17 版本被 lane 取缔。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("lane")]),s._v(" ： 更新优先级。（在一次更新任务中，将赋予给更新的 fiber 的一个更新优先级 lane。）")]),s._v(" "),n("li",[n("strong",[s._v("childLanes")]),s._v("："),n("code",[s._v("children")]),s._v(" 中更新优先级。（如果当前 fiber 的 child 中有高优先级任务，那么当前 fiber 的 childLanes 等于当前优先级）。")])]),s._v(" "),n("h3",{attrs:{id:"scheduleupdateonfiber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scheduleupdateonfiber"}},[s._v("#")]),s._v(" scheduleUpdateOnFiber")]),s._v(" "),n("p",[s._v("React 更新任务的起点 - "),n("code",[s._v("scheduleUpdateOnFiber")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("类组件 setState 更新")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberClassComponent.new.js -> classComponentUpdater")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("enqueueSetState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" payload"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" callback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       \n     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" lane "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("requestUpdateLane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("scheduleUpdateOnFiber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" eventTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("函数组件 useState 更新")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberHooks.new.js -> dispatchReducerAction")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("dispatchReducerAction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" lane "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("requestUpdateLane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("scheduleUpdateOnFiber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" eventTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如上代码都是精简后，保留的最核心的流程。可以明确看到，无论是组件更新的本质就是：")]),s._v(" "),n("ul",[n("li",[s._v("创建一个任务优先级 lane。")]),s._v(" "),n("li",[s._v("然后进行 "),n("strong",[s._v("scheduleUpdateOnFiber")]),s._v("。 那么这个 scheduleUpdateOnFiber 应该就是整个 React 更新任务的开始。")])]),s._v(" "),n("h4",{attrs:{id:"scheduleupdateonfiber-开始更新-fiber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scheduleupdateonfiber-开始更新-fiber"}},[s._v("#")]),s._v(" scheduleUpdateOnFiber 开始更新 fiber")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> scheduleUpdateOnFiber")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("scheduleUpdateOnFiber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("lane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 递归向上标记更新优先级 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" root "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("markUpdateLaneFromFiberToRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 如果当前 root 确定更新，那么会执行 ensureRootIsScheduled */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ensureRootIsScheduled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" eventTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("scheduleUpdateOnFiber 主要做了两件事：")]),s._v(" "),n("ul",[n("li",[s._v("第一个就是通过当前的更新优先级 lane ，把当前 fiber 到 rootFiber 的父级链表上的所有优先级都给更新了。")]),s._v(" "),n("li",[s._v("如果当前 fiber 确定更新，那么会调用 "),n("code",[s._v("ensureRootIsScheduled")])])]),s._v(" "),n("h4",{attrs:{id:"优先级标记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优先级标记"}},[s._v("#")]),s._v(" 优先级标记")]),s._v(" "),n("p",[n("strong",[s._v("那么 markUpdateLaneFromFiberToRoot 如何标记的优先级？")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> markUpdateLaneFromFiberToRoot")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {*} sourceFiber 发生 state 变化的fiber ，比如组件 A 触发了 useState ，那么组件 A 对应的 fiber 就是 sourceFiber\n * @param {*} lane        产生的更新优先级\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("markUpdateLaneFromFiberToRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("lane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 更新当前 fiber 上 */")]),s._v("\n    sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 更新缓存树上的 lanes */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alternate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alternate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 当前更新的 fiber */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 找到返回父级 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sourceFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("return"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* TODO: 更新 childLanes 字段 */")]),s._v("\n        parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alternate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lane"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 递归遍历更新 */")]),s._v("\n        node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("return"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("markUpdateLaneFromFiberToRoot 做的事很重要：")]),s._v(" "),n("ul",[n("li",[s._v("首先会更新当前 fiber 上的更新优先级。在 fiber 章节我们讲过，fiber 架构采用 ‘连体婴’形式的双缓冲树，所有还要更新当前 fiber 的缓冲树 "),n("code",[s._v("alternate")]),s._v(" 上的优先级。")]),s._v(" "),n("li",[s._v("然后会递归向上把父级连上的 childLanes 都更新，更新成当前的任务优先级。")])]),s._v(" "),n("p",[s._v("为什么向上递归更新父级的 childLanes ？")]),s._v(" "),n("ul",[n("li",[s._v("所有的 fiber 是通过一颗 fiber 树关联到一起的，如果组件 A 发生一次更新，React 是从 root 开始深度遍历更新 fiber 树。")]),s._v(" "),n("li",[s._v("那么更新过程中需要深度遍历整个 fiber 树吗？，当然也不是，那么只有一个组件更新，所有的 fiber 节点都调和无疑是性能上的浪费。")]),s._v(" "),n("li",[s._v("既然要从头更新，又不想调和整个 fiber 树，那么如何找到更新的组件 A 呢？这个时候 "),n("strong",[n("code",[s._v("childLanes")])]),s._v(" 就派上用场了，如果 A 发生了更新，那么先向上递归更新父级链的 "),n("code",[s._v("childLanes")]),s._v("，接下来从 Root Fiber 向下调和的时候，发现 childLanes 等于当前更新优先级，那么说明它的 child 链上有新的更新任务，则会继续向下调和，反之退出调和流程。")])]),s._v(" "),n("p",[n("strong",[s._v("Root Fiber 是通过 childLanes 逐渐向下调和找到需要更新的组件的。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render1.png",alt:"render1"}})]),s._v(" "),n("p",[s._v("整个 fiber 树调和流程。")]),s._v(" "),n("ul",[n("li",[s._v("第一阶段是发生更新，那么产生一个更新优先级 "),n("code",[s._v("lane")]),s._v(" 。")]),s._v(" "),n("li",[s._v("第二阶段向上标记 childLanes 过程。")]),s._v(" "),n("li",[s._v("第三阶段是向下调和过程，有的同学会问，为什么 A 会被调和，原因是 A 和 B 是同级，如果父级元素调和，并且向下调和，那么父级的第一级子链上的 fiber 都会进入调和流程。从 fiber 关系上看，Root 先调和的是 child 指针上的 A ，然后 A 会退出向下调和，接下来才是 sibling B，接下来 B 会向下调和，通过 childLanes 找到当事人 F，然后 F 会触发 render 更新。这也就解决问题2，Child2 的调和问题。")])]),s._v(" "),n("p",[s._v("通过上述我们知道了如何找到 F 并执行 render 的，那么还有一个问题，就是 B，E 会向下调和，如果它们是组件，那么会 render 么，答案是否定的，要记住的是"),n("strong",[s._v("调和过程并非 render 过程")]),s._v("，调和过程有可能会触发 render 函数，也有可能只是继续向下调和，而本身不会执行 render 。")]),s._v(" "),n("p",[s._v("既然知道了如何去更新 childLanes ，以及更新 childLanes 的意义，我们接着向下分析流程。在 scheduleUpdateOnFiber 中，最后会调用 "),n("code",[s._v("ensureRootIsScheduled")]),s._v(" ，那么它的作用又是什么呢？")]),s._v(" "),n("p",[s._v("ensureRootIsScheduled 的作用就是根据任务的类型，发起异步调度任务，在调度章节已经讲了调度流程。接下来会走调度的流程。")]),s._v(" "),n("ul",[n("li",[s._v("对于 "),n("code",[s._v("legacy sync")]),s._v(" 模式最后的更新任务是 "),n("code",[s._v("performSyncWorkOnRoot")]),s._v(" 。")]),s._v(" "),n("li",[s._v("对于 "),n("code",[s._v("Concurrent")]),s._v(" 模式最后的更新任务是 "),n("code",[s._v("performConcurrentWorkOnRoot")]),s._v("。")])]),s._v(" "),n("h3",{attrs:{id:"从-workloop-到-beginwork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从-workloop-到-beginwork"}},[s._v("#")]),s._v(" 从 workLoop 到 beginWork")]),s._v(" "),n("p",[s._v("这里主要以 legacy 模式为主，performSyncWorkOnRoot ：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> performSyncWorkOnRoot")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performSyncWorkOnRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("root")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* render 阶段 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" exitStatus "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("renderRootSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* commit 阶段 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("commitRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 如果有其他的等待中的任务，那么继续更新 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ensureRootIsScheduled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("调和的两大阶段 "),n("code",[s._v("render")]),s._v(" 和 "),n("code",[s._v("commit")]),s._v(" 都在这个函数中执行。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("renderRootSync")]),s._v(" 代表 render 阶段。")]),s._v(" "),n("li",[n("code",[s._v("commitRoot")]),s._v(" 代表 commit 阶段。")]),s._v(" "),n("li",[s._v("当 render 和 commit 阶段执行之后，如果有其他的等待中的任务，那么继续执行调度任务。")])]),s._v(" "),n("p",[s._v("到此为止，一次更新调度任务的初始化工作完成。开始正式进入调和阶段。对前戏阶段做一下总结，流程图如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render2.png",alt:"render2"}})]),s._v(" "),n("h4",{attrs:{id:"workloop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workloop"}},[s._v("#")]),s._v(" workLoop")]),s._v(" "),n("p",[s._v("renderRootSync 做了什么？")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> renderRootSync")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("renderRootSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("lanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoopSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* workLoop完毕后，证明所有节点都遍历完毕，那么重置状态，进入 commit 阶段 */")]),s._v("\n    workInProgressRoot "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    workInProgressRootRenderLanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("renderRootSync 核心功能：")]),s._v(" "),n("ul",[n("li",[s._v("执行 "),n("code",[s._v("workLoopSync")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("workLoop")]),s._v(" 完毕后，证明所有节点都遍历完毕，那么重置状态，进入 "),n("code",[s._v("commit")]),s._v(" 阶段。")])]),s._v(" "),n("p",[n("code",[s._v("workLoopSync")]),s._v(" 在整个 render 流程中充当的角色非常重要，可以把 "),n("code",[s._v("workLoopSync")]),s._v(" 当作一个循环运作的加工器，每一个需要调和的 fiber 可以当作一个零件，每一个零件都需要进入加工器，如果没有待加工的零件，那么加工器才停止运转。下面就是加工器的具体实现。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> workLoopSync")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoopSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 循环执行 performUnitOfWork ，一直到 workInProgress 为空 */")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("如上只要 "),n("code",[s._v("workInProgress")]),s._v(" 不为 "),n("code",[s._v("null")]),s._v("（还有需要调和的 fiber），那么 workLoopSync 会循环调用 "),n("code",[s._v("performUnitOfWork")]),s._v("。")])]),s._v(" "),n("p",[s._v("当 Concurrent 模式下会通过 "),n("code",[s._v("shouldYield")]),s._v(" ，来判断有没有过期的任务，有过期任务，会中断 workLoop ，那么也就是说明了"),n("strong",[s._v("render阶段是可以被打断的。")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("shouldYield")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"performunitofwork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#performunitofwork"}},[s._v("#")]),s._v(" performUnitOfWork")]),s._v(" "),n("p",[s._v("回到 "),n("code",[s._v("workLoopSync")]),s._v(" 流程上来，fiber 树是深度优先遍历得到的，在遍历完父节点，那么接下来就会遍历子节点。在这其中，每一个调和的 fiber 都将作为 "),n("code",[s._v("workInProgress")]),s._v(" 进行调和更新。无论什么模式，workLoop 的执行单元都是 fiber 。而且更新单元的函数叫做 "),n("code",[s._v("performUnitOfWork")]),s._v(" 。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberWorkLoop.new.js -> performUnitOfWork")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("unitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v("  next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("beginWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" subtreeRenderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pendingProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("completeUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"beginwork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beginwork"}},[s._v("#")]),s._v(" beginWork")]),s._v(" "),n("h3",{attrs:{id:"beginwork-发生场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beginwork-发生场景"}},[s._v("#")]),s._v(" beginWork 发生场景")]),s._v(" "),n("p",[s._v("假设有一个组件 fiber 链："),n("code",[s._v("root Fiber --child--\x3e A组件 --child--\x3e B组件 --child--\x3e C组件")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render3.png",alt:"render3"}})]),s._v(" "),n("p",[s._v("以组件B 为参考，来看一下 React 如何调和的，那么一次更新就有可能有三种场景：")]),s._v(" "),n("ol",[n("li",[s._v("场景一："),n("strong",[s._v("更新 A 组件")]),s._v("，那么 A 触发更新，那么如果 B,C 没有做渲染控制处理（比如 memo PureComponent），那么更新会波动到 B ， C，那么 A，B，C 都会 rerender。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render4.png",alt:"render4"}})]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("场景二："),n("strong",[s._v("当更新 B 组件")]),s._v("，那么组件 A fiber 会被标记，然后 A 会调和，但是不会 rerender；组件 B 是当事人，既会进入调和，也会 rerender；组件 C 受到父组件 B 的影响，会 rerender。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render5.png",alt:"render5"}})]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("场景三："),n("strong",[s._v("当更新 C 件")]),s._v("，那么 A，B 会进入调和流程，但是不会 rerender，C 是当事人，会调和并 rerender。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render6.png",alt:"render6"}})]),s._v(" "),n("p",[s._v("如上的场景本质上都在 beginWork 中进行的，那么 beginWork 是如何处理这些逻辑的：")]),s._v(" "),n("h3",{attrs:{id:"beginwork-的两个阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beginwork-的两个阶段"}},[s._v("#")]),s._v(" beginWork 的两个阶段")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberBeginWork.new.js -> beginWork")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {*} current         current 树 fiber \n * @param {*} workInProgress  workInProgress 树 fiber \n * @param {*} renderLanes     当前的 render 优先级\n * @returns \n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("beginWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* -------------------第一部分-------------------- */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// update时：如果current存在可能存在优化路径，可以复用current（即上一次更新的Fiber节点）")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// current!== null 来判断当前 fiber 是否创建过，如果第一次 mounted ， 那么 current 为 null")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一阶段主要针对更新的情况。如果初始化，那么直接跳过第一阶段，到第二阶段。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 更新流程 */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* current 树上上一次渲染后的 props */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" oldProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* workInProgress 树上这一次更新的 props  */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pendingProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" newProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasLegacyContextChanged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          didReceiveUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前更新是否来源于父级的更新 为 true 则来自父组件更新")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* props 和 context 没有发生变化，检查是否更新来自自身或者 context 改变 */")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" hasScheduledUpdateOrContext "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkScheduledUpdateOrContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("hasScheduledUpdateOrContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n              didReceiveUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("attemptEarlyBailoutIfNoScheduledUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这里省略了一些判断逻辑 */")]),s._v("\n          didReceiveUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      didReceiveUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* -------------------第二部分-------------------- */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* TODO: 走到这里流程会被调和 | 更新，比如函数执行会执行，类组件会执行 render 。 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mount时：根据tag不同，创建不同的子Fiber节点")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 函数组件的情况 */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" FunctionComponent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateFunctionComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" resolvedProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" renderLanes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 类组件的情况 */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" ClassComponent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateClassComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("resolvedProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 元素类型 fiber <div>, <span>  */")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" HostComponent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateHostComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 其他 fiber 情况 */")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br")])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),n("p",[s._v("除 rootFiber 以外， 组件 mount 时，由于是首次渲染，是不存在当前组件对应的 Fiber 节点在上一次更新时的 Fiber 节点，即 mount 时 "),n("code",[s._v("current === null")]),s._v("。组件 update时，由于之前已经 mount 过，所以 "),n("code",[s._v("current !== null")]),s._v("。所以我们可以通过"),n("code",[s._v("current === null ?")]),s._v("来区分组件是处于 mount 还是 update。")])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("didReceiveUpdate")]),s._v(" "),n("p",[s._v("didReceiveUpdate ：这个变量主要证明当前更新是否来源于父级的更新，那么自身并没有更新。比如更新 B 组件，那么 C 组件也会跟着更新，这个情况下 didReceiveUpdate = true。")])]),s._v(" "),n("p",[s._v("基于此原因，"),n("code",[s._v("beginWork")]),s._v("的工作可以分为两部分：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("update")]),s._v("时：如果"),n("code",[s._v("current")]),s._v("存在，在满足一定条件时可以复用"),n("code",[s._v("current")]),s._v("节点，这样就能克隆"),n("code",[s._v("current.child")]),s._v("作为"),n("code",[s._v("workInProgress.child")]),s._v("，而不需要新建"),n("code",[s._v("workInProgress.child")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("mount")]),s._v("时：除"),n("code",[s._v("fiberRootNode")]),s._v("以外，"),n("code",[s._v("current === null")]),s._v("。会根据"),n("code",[s._v("fiber.tag")]),s._v("不同，创建不同类型的"),n("code",[s._v("子Fiber节点")])])]),s._v(" "),n("h3",{attrs:{id:"第一阶段-update"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段-update"}},[s._v("#")]),s._v(" 第一阶段(update)")]),s._v(" "),n("p",[s._v("首先通过 "),n("code",[s._v("current!== null")]),s._v(" 来判断当前 fiber 是否创建过，如果第一次 mounted ， 那么 current 为 null，而第一阶段主要针对更新的情况。如果初始化，那么直接跳过第一阶段，**到第二阶段。**如果是更新流程。那么判断 oldProps === newProps（源码中还判断了老版本 context 是否变化），那么两者相等。一般会有以下几种情况：")]),s._v(" "),n("p",[n("strong",[s._v("情况一")]),s._v("：还是回到上面场景上来，如果 C 组件更新，那么 B 组件被标记 ChildLanes 会进入到 beginWork 调和阶段，但是 B 组件本身 props 不会发生变化。")]),s._v(" "),n("p",[n("strong",[s._v("情况二")]),s._v("：通过 useMemo 等方式缓存了 React element 元素，在渲染控制章节讲到过。")]),s._v(" "),n("p",[n("strong",[s._v("情况三")]),s._v("：就是更新发生在当前组件本身，比如 B 组件发生更新，但是 B 组件的 props 并没有发生变化，所以也会走到这个流程上来。")]),s._v(" "),n("p",[s._v("反之如果两者不想等，证明父级 fiber 重新 rerender 导致了 props 改变，此时 didReceiveUpdate = true ，那么第一阶段完成，"),n("strong",[s._v("进入到第二阶段。")])]),s._v(" "),n("p",[n("strong",[s._v("新老 props 相等")]),s._v("的处理逻辑如下：")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("checkScheduledUpdateOrContext")])])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberBeginWork.new.js -> checkScheduledUpdateOrContext")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkScheduledUpdateOrContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" updateLanes "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这种情况说明当前更新 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("includesSomeLane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updateLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 如果该 fiber 消费了 context ，并且 context 发生了改变。 */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("enableLazyContextPropagation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" dependencies "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dependencies"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dependencies "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkIfContextChanged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dependencies"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("当新老 props 相等情况，首先会检查当前 fiber 的 "),n("code",[s._v("lane")]),s._v(" 是否等于当前的更新优先级，如果相等，那么证明更新来源当前 fiber，比如 B 组件发生更新，那么会走这里（情况三）。当然期间也会判断是否有消费 "),n("code",[s._v("context")]),s._v(" 并发生了变化。最后返回状态 hasScheduledUpdateOrContext 。")]),s._v(" "),n("p",[s._v("如果 "),n("code",[s._v("hasScheduledUpdateOrContext")]),s._v(" 为 false，证明当前组件没有更新，也没有 context 上的变化，那么还有一种情况就是 child 可能有更新，但是当前 fiber 不需要更新（情况一）。那么会直接返回 "),n("code",[s._v("attemptEarlyBailoutIfNoScheduledUpdate")]),s._v(" ，"),n("strong",[s._v("退出第二阶段")]),s._v("。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("strong",[s._v("attemptEarlyBailoutIfNoScheduledUpdate")])])]),s._v(" "),n("p",[s._v("attemptEarlyBailoutIfNoScheduledUpdate 这个函数会处理部分 Context 逻辑，但是最重要的是调用了 "),n("strong",[n("code",[s._v("bailoutOnAlreadyFinishedWork")])]),s._v(" 。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// react-reconciler/src/ReactFiberBeginWork.new.js -> bailoutOnAlreadyFinishedWork")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bailoutOnAlreadyFinishedWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("renderLanes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 如果 children 没有高优先级的任务，说明所有的 child 都没有更新，那么直接 返回，child 也不会被调和  */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("includesSomeLane")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 这里做了流程简化 */")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 当前fiber没有更新。但是它的children 需要更新。  */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("cloneChildFibers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("bailoutOnAlreadyFinishedWork 流程非常重要。它主要做了两件事：")]),s._v(" "),n("ul",[n("li",[s._v("首先通过 includesSomeLane 判断 childLanes 是否是高优先级任务，如果不是，那么所有子孙 fiber 都不需要调和 ，那么直接返回 null，child 也不会被调和。")]),s._v(" "),n("li",[s._v("如果 childLanes 优先级高，那么证明 child 需要被调和，但是当前组件不需要，所以会克隆一下 children，返回 children ，那么本身不会 "),n("code",[s._v("rerender")]),s._v("。")])]),s._v(" "),n("h3",{attrs:{id:"第二阶段-mount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段-mount"}},[s._v("#")]),s._v(" 第二阶段(mount)")]),s._v(" "),n("p",[s._v("第二阶段就是更新 fiber，比如是函数组件，就会调用 "),n("code",[s._v("updateFunctionComponent")]),s._v("，类组件就调用 "),n("code",[s._v("updateClassComponent")]),s._v("，然后进行 rerender 了。")]),s._v(" "),n("p",[s._v("对于我们常见的组件类型，如（"),n("code",[s._v("FunctionComponent")]),s._v("/"),n("code",[s._v("ClassComponent")]),s._v("/"),n("code",[s._v("HostComponent")]),s._v("），最终会进入"),n("code",[s._v("reconcileChildren")]),s._v("方法。")]),s._v(" "),n("ul",[n("li",[s._v("对于"),n("code",[s._v("mount")]),s._v("的组件，他会创建新的"),n("code",[s._v("子Fiber节点")])]),s._v(" "),n("li",[s._v("对于"),n("code",[s._v("update")]),s._v("的组件，他会将当前组件与该组件在上次更新时对应的"),n("code",[s._v("Fiber节点")]),s._v("比较（也就是俗称的"),n("code",[s._v("Diff")]),s._v("算法），将比较的结果生成新"),n("code",[s._v("Fiber节点")])])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("reconcileChildren")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("current"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  workInProgress"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  nextChildren"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  renderLanes"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Lanes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对于mount的组件")]),s._v("\n    workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mountChildFibers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对于update的组件")]),s._v("\n    workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("reconcileChildFibers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      renderLanes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("从代码可以看出，和"),n("code",[s._v("beginWork")]),s._v("一样，他也是通过"),n("code",[s._v("current === null ?")]),s._v("区分"),n("code",[s._v("mount")]),s._v("与"),n("code",[s._v("update")]),s._v("。不论走哪个逻辑，最终他会生成新的子"),n("code",[s._v("Fiber节点")]),s._v("并赋值给"),n("code",[s._v("workInProgress.child")]),s._v("，作为本次"),n("code",[s._v("beginWork")]),s._v(" 返回值，并作为下次"),n("code",[s._v("performUnitOfWork")]),s._v("执行时"),n("code",[s._v("workInProgress")]),s._v("的传参。")]),s._v(" "),n("h3",{attrs:{id:"流程总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程总结"}},[s._v("#")]),s._v(" 流程总结")]),s._v(" "),n("p",[s._v("接下来以上述中的"),n("strong",[s._v("组件B")]),s._v("为例子，在强化一下更新流程。")]),s._v(" "),n("p",[n("strong",[s._v("场景一")]),s._v("：当更新 A 时候，那么 A 组件的 fiber 会进入调和流程，会执行 render 形成新的组件 B 对应的 element 元素，接下来调和 B ，因为 B 的 "),n("code",[s._v("newProps")]),s._v(" 不等于 "),n("code",[s._v("oldProps")]),s._v("，所以会 "),n("code",[s._v("didReceiveUpdate = true")]),s._v(" ，然后更新组件，也会触发 render。（这里都是默认没有渲染控制的场景，比如 "),n("code",[s._v("memo")]),s._v(" "),n("code",[s._v("PureComponent")]),s._v(" 等 ）。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render7.png",alt:"render7"}})]),s._v(" "),n("p",[n("strong",[s._v("场景二")]),s._v("：当更新 B 时候，那么 A 组件会标记 childLanes，所以 A 会被调和，但是不会 render，然后到了主角 B ，B 由于新老 props 相等，所以会 "),n("code",[s._v("checkScheduledUpdateOrContext")]),s._v(" 流程，判断 lane 等于 renderLanes ，检查到 lane 等于 renderLane，所以会执行更新，触发 render。 C 组件也就跟着更新。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render8.png",alt:"render8"}})]),s._v(" "),n("p",[n("strong",[s._v("场景三")]),s._v("：当更新 C 时候，那么 A 和 B 组件会标记 childLanes，所以 A 和 B 会被调和，但是不会更新，然后到 C ，C 会走正常流程。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render9.png",alt:"render9"}})]),s._v(" "),n("p",[n("strong",[s._v("场景四")]),s._v("：还有一种情况，什么时候 B 会跳出调和流程呢。")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render10.png",alt:"render10"}})]),s._v(" "),n("h3",{attrs:{id:"beginwork-流程图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beginwork-流程图"}},[s._v("#")]),s._v(" beginWork 流程图")]),s._v(" "),n("p",[n("img",{attrs:{src:"/blog/images/react/render11.png",alt:"render11"}})]),s._v(" "),n("p",[s._v("组件更新和调和过程。rerender 一定会调和，但是调和并不一定 rerender，也有可能找到待更新的子元素。")])])}),[],!1,null,null,null);t.default=e.exports}}]);