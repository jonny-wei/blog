(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{389:function(t,v,_){"use strict";_.r(v);var e=_(6),s=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),v("h2",{attrs:{id:"git-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-简介"}},[t._v("#")]),t._v(" Git 简介")]),t._v(" "),v("p",[t._v("Git是当前最先进、最主流的"),v("strong",[t._v("分布式")]),t._v("版本控制系统。常见版本控制主要有两种："),v("strong",[t._v("集中式版本控制")]),t._v("和"),v("strong",[t._v("分布式版本控制")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"集中式版本控制系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集中式版本控制系统"}},[t._v("#")]),t._v(" 集中式版本控制系统")]),t._v(" "),v("p",[t._v("集中式版本控制系统，版本库是集中存放在中央服务器的。工作时，每个人都要先从中央服务器获取最新的版本。完成之后，再把自己添加/修改的内容提交到中央服务器。所有文件和历史数据都存储在中央服务器上。SVN 是最流行的集中式版本控制系统之一。")]),t._v(" "),v("p",[t._v("集中式版本控制系统的缺点就是必须联网才能使用，如果使用局域网还好，速度会比较快。而如果是使用互联网，网速慢的话，就可能需要等待很长时间。除此之外，如果中央服务器出现故障，那么版本控制将不可用。如果中心数据库损坏，若数据未备份，数据就会丢失。")]),t._v(" "),v("h3",{attrs:{id:"分布式版本控制系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制系统"}},[t._v("#")]),t._v(" 分布式版本控制系统")]),t._v(" "),v("p",[t._v("分布式版本控制系统，每台终端都可以保存版本库，版本库可以不同，可以对每个版本库进行修改，修改完成后可以集中进行更新。虽然它没有中心服务器，但可以有一个备份服务器，它的功能有点类似于 SVN 的中央服务器，但它的作用仅是方便交换修改，而不像 SVN 那样还要负责源代码的管理。Git 是最流行的分布式版本控制系统之一。")]),t._v(" "),v("p",[t._v("和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑损坏不会影响到协作的其他人。")]),t._v(" "),v("h3",{attrs:{id:"svn-vs-git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#svn-vs-git"}},[t._v("#")]),t._v(" SVN vs Git")]),t._v(" "),v("p",[t._v("Git 相较于 SVN：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("提交速度更快：")]),t._v(" 因为在 SVN 中需要更频繁地提交到中央存储库，所以网络流量会减慢每个人的速度。而使用 Git，主要在本地存储库上工作，只需每隔一段时间才提交到中央存储库。")]),t._v(" "),v("li",[v("strong",[t._v("没有单点故障：")]),t._v(" 使用 SVN，如果中央存储库出现故障，则在修复存储库之前，其他开发人员无法提交他们的代码。使用 Git，每个开发人员都有自己的存储库，因此中央存储库是否损坏并不重要。开发人员可以继续在本地提交代码，直到中央存储库被修复，然后就可以推送他们的更改；")]),t._v(" "),v("li",[v("strong",[t._v("可以离线使用：")]),t._v(" 与 SVN 不同，Git 可以离线工作，即使网络失去连接，也可以继续工作而不会丢失功能。")])]),t._v(" "),v("h2",{attrs:{id:"git-基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-基本概念"}},[t._v("#")]),t._v(" Git 基本概念")]),t._v(" "),v("h3",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[t._v("概念名称")])]),t._v(" "),v("th",[v("strong",[t._v("描述")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("工作区")]),t._v("（Workspace）")]),t._v(" "),v("td",[t._v("就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("暂存区")]),t._v("（stage 或 index）")]),t._v(" "),v("td",[t._v("用于临时存放文件的修改，实际上上它只是一个文件（"),v("code",[t._v(".git/index")]),t._v("），保存待提交的文件列表信息。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("版本库/仓库")]),t._v("（Repository）")]),t._v(" "),v("td",[t._v("Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("服务端/远程仓库")]),t._v("（origin 或 remote）")]),t._v(" "),v("td",[t._v("服务端的版本库，专用的Git服务器，为多人共享提供服务，承担中心服务器的角色。本地版本库通过push指令把代码推送到服务端版本库。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("本地仓库")])]),t._v(" "),v("td",[t._v("用户机器上直接使用的的的版本库")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("分支")]),t._v("（Branch）")]),t._v(" "),v("td",[t._v("分支是从主线分离出去的“副本”，可以独立操作而互不干扰，仓库初始化就有一个默认主分支"),v("code",[t._v("master")]),t._v("。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("头")]),t._v("（HEAD）")]),t._v(" "),v("td",[t._v("HEAD类似一个“指针”，指向当前活动 "),v("strong",[t._v("分支")]),t._v(" 的 "),v("strong",[t._v("最新版本")]),t._v("。HEAD始终指向当前活动分支，多个分支只能有一个处于活动状态")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("提交")]),t._v("（Commit）")]),t._v(" "),v("td",[t._v("把暂存区的所有变更的内容提交到当前仓库的活动分支。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("推送")]),t._v("（Push）")]),t._v(" "),v("td",[t._v("将本地仓库的版本推送到服务端（远程）仓库，与他人共享。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("拉取")]),t._v("（Pull）")]),t._v(" "),v("td",[t._v("从服务端（远程）仓库获取更新到本地仓库，获取他人共享的更新。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("获取")]),t._v("（Fetch）")]),t._v(" "),v("td",[t._v("从服务端（远程）仓库更新，作用同拉取（Pull），区别是不会自动合并。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("冲突")]),t._v("（Conflict）")]),t._v(" "),v("td",[t._v("多人对同一文件的工作副本进行更改，并将这些更改合并到仓库时就会面临冲突，需要人工合并处理。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("合并")]),t._v("（Merge）")]),t._v(" "),v("td",[t._v("对有冲突的文件进行合并操作，Git会自动合并变更内容，无法自动处理的冲突内容会提示人工处理。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("标签")]),t._v("（Tags）")]),t._v(" "),v("td",[t._v("标签指的是某个分支某个特定时间点的状态，可以理解为提交记录的别名，常用来标记版本。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("master")]),t._v("（或main）")]),t._v(" "),v("td",[t._v("仓库的“"),v("code",[t._v("master")]),t._v("”分支，默认的主分支，初始化仓库就有了。Github上创建的仓库默认名字为“"),v("code",[t._v("main")]),t._v("”")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("origin/master")])]),t._v(" "),v("td",[t._v("表示远程仓库（"),v("code",[t._v("origin")]),t._v("）的“"),v("code",[t._v("master")]),t._v("”分支")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("origin/HEAD")])]),t._v(" "),v("td",[t._v("表示远程仓库（"),v("code",[t._v("origin")]),t._v("）的最新提交的位置，一般情况等于“"),v("code",[t._v("origin/master")]),t._v("”")])])])]),t._v(" "),v("h3",{attrs:{id:"工作区-暂存区-仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作区-暂存区-仓库"}},[t._v("#")]),t._v(" 工作区/暂存区/仓库")]),t._v(" "),v("p",[v("img",{attrs:{src:"/blog/images/devops/git1.png",alt:"git1"}})]),t._v(" "),v("p",[v("strong",[t._v("工作区")]),t._v("（Workspace）就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区。")]),t._v(" "),v("ul",[v("li",[t._v("在这里新增文件、修改文件内容，或删除文件。")])]),t._v(" "),v("p",[v("strong",[t._v("暂存区")]),t._v("（stage或index）用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。")]),t._v(" "),v("ul",[v("li",[t._v("用"),v("code",[t._v("git add")]),t._v(" 命令将工作区的修改保存到暂存区。")])]),t._v(" "),v("p",[v("strong",[t._v("版本库/仓库")]),t._v("（Repository  仓库）Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。就是工作区目录下的隐藏文件夹"),v("code",[t._v(".git")]),t._v("，包含暂存区、分支、历史记录等信息。")]),t._v(" "),v("ul",[v("li",[t._v("用"),v("code",[t._v("git commit")]),t._v(" 命令将暂存区的内容正式提交到版本库。")]),t._v(" "),v("li",[v("code",[t._v("master")]),t._v(" 为仓库的默认分支"),v("code",[t._v("master")]),t._v("，"),v("strong",[t._v("HEAD")]),t._v("是一个“指针”指向当前分支的最新提交，默认指向最新的"),v("code",[t._v("master")]),t._v("。")])]),t._v(" "),v("h3",{attrs:{id:"git-基本流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-基本流程"}},[t._v("#")]),t._v(" Git 基本流程")]),t._v(" "),v("p",[v("img",{attrs:{src:"/blog/images/devops/git2.png",alt:"git2"}})]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("准备仓库")]),t._v("：创建或从服务端克隆一个仓库。")]),t._v(" "),v("li",[v("strong",[t._v("搬砖")]),t._v("：在工作目录中添加、修改代码。")]),t._v(" "),v("li",[v("strong",[t._v("暂存")]),t._v("（git add）：将需要进行版本管理的文件放入暂存区域。")]),t._v(" "),v("li",[v("strong",[t._v("提交")]),t._v("（git commit）：将暂存区域的文件提交到 Git 仓库。")]),t._v(" "),v("li",[v("strong",[t._v("推送")]),t._v("（git push）：将本地仓库推送到远程仓库，同步版本库。")]),t._v(" "),v("li",[v("strong",[t._v("获取更新")]),t._v("（fetch/pull）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享。区别是 "),v("code",[t._v("git pull")]),t._v(" 多了一个步骤，就是自动合并更新工作区。")])]),t._v(" "),v("h3",{attrs:{id:"git-状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-状态"}},[t._v("#")]),t._v(" Git 状态")]),t._v(" "),v("p",[t._v("Git在执行提交的时候，不是直接将工作区的修改保存到仓库，而是将暂存区域的修改保存到仓库。要提交文件，首先需要把文件加入到暂存区域中。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/blog/images/devops/git3.png",alt:"git3"}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("未跟踪（untracked）：新添加的文件，或被移除跟踪的文件，未建立跟踪，通过"),v("code",[t._v("git add")]),t._v("添加暂存并建立跟踪。")])]),t._v(" "),v("li",[v("p",[t._v("未修改：从仓库签出的文件默认状态，修改后就是“已修改”状态了。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("已修改")]),t._v("（modified）：文件被修改后的状态。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("已暂存")]),t._v("（staged）：修改、新增的文件添加到暂存区后的状态。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("已提交")]),t._v("(committed)：从暂存区提交到版本库。")])])]),t._v(" "),v("h3",{attrs:{id:"git-忽略-gitignore-配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略-gitignore-配置"}},[t._v("#")]),t._v(" Git 忽略 "),v("code",[t._v(".gitignore")]),t._v(" 配置")]),t._v(" "),v("p",[t._v("在工作区根目录下创建“"),v("code",[t._v(".gitignore")]),t._v("”文件，文件中配置不需要进行版本管理的文件、文件夹。“"),v("code",[t._v(".gitignore")]),t._v("”文件本身是被纳入版本管理的，可以共享。有如下规则：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("#")]),t._v("符号开头为注释。")]),t._v(" "),v("li",[t._v("可以使用Linux通配符。\n"),v("ul",[v("li",[t._v("星号（*）代表任意多个字符，")]),t._v(" "),v("li",[t._v("问号（？）代表一个字符，")]),t._v(" "),v("li",[t._v("方括号（[abc]）代表可选字符范围，")]),t._v(" "),v("li",[t._v("大括号（{string1,string2,...}）代表可选的字符串等。")])])]),t._v(" "),v("li",[t._v("感叹号（"),v("code",[t._v("!")]),t._v("）开头：表示例外规则，将不被忽略。")]),t._v(" "),v("li",[t._v("路径分隔符（/f）"),v("strong",[t._v("开头")]),t._v("：，表示要忽略"),v("strong",[t._v("根目录")]),t._v("下的"),v("strong",[t._v("文件")]),v("code",[t._v("f")]),t._v("。")]),t._v(" "),v("li",[t._v("路径分隔符（f/）"),v("strong",[t._v("结尾")]),t._v("：，表示要忽略"),v("strong",[t._v("文件夹")]),v("code",[t._v("f")]),t._v("下面的所有文件。")])]),t._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为注释")]),t._v("\n*.txt "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略所有“.txt”结尾的文件")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.txt "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#lib.txt除外")]),t._v("\n/temp "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#仅忽略项目根目录下的temp文件,不包括其它目录下的temp，如不包括“src/temp”")]),t._v("\nbuild/ "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略build/目录下的所有文件")]),t._v("\ndoc/*.txt "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br")])]),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v(".gitigrone 配置")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("各种语言项目的常用"),v("code",[t._v(".gitignore")]),t._v("文件配置"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),v("h3",{attrs:{id:"q1-为什么后来增加了-gitignore-规则却没有生效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q1-为什么后来增加了-gitignore-规则却没有生效"}},[t._v("#")]),t._v(" Q1. 为什么后来增加了 "),v("code",[t._v(".gitignore")]),t._v(" 规则却没有生效？")]),t._v(" "),v("p",[t._v("这是因为我们误解了 .gitignore 文件的用途，该文件只能作用于 Untracked Files，也就是那些从来没有被 Git 记录过的文件（自添加以后，从未 add 及 commit 过的文件）。")]),t._v(" "),v("p",[t._v("之所以你的规则不生效，是因为那些 "),v("code",[t._v(".log")]),t._v(" 文件曾经被 Git 记录过，因此 "),v("code",[t._v(".gitignore")]),t._v(" 对它们完全无效。这也正是开头那段简短答案所做的事情：")]),t._v(" "),v("ol",[v("li",[t._v("从 Git 的数据库中删除对于该文件的追踪；")]),t._v(" "),v("li",[t._v("把对应的规则写入 "),v("code",[t._v("_.gitignore")]),t._v("，让忽略真正生效；")]),t._v(" "),v("li",[t._v("提交＋推送。")])]),t._v(" "),v("p",[t._v("只有这样做，所有的团队成员才会保持一致而不会有后遗症，也只有这样做，其他的团队成员根本不需要做额外的工作来维持对一个文件的改变忽略。")]),t._v(" "),v("p",[t._v("最后有一点需要注意的，"),v("code",[t._v("git rm --cached")]),t._v(" 删除的是追踪状态，而不是物理文件；如果你真的是彻底不想要了，你也可以直接 "),v("code",[t._v("rm")]),t._v("＋忽略＋提交。")]),t._v(" "),v("p",[v("strong",[t._v("较优秀的方法")]),t._v(":")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git rm -r --cached 要忽略的文件")]),t._v(" (如: "),v("code",[t._v("git rm -r --cahced build/*")]),t._v(", 如修改列表中的内容全部是不需要的, 那么你可以使用最最简单的命令搞定"),v("code",[t._v("git rm -r --cached .")]),t._v(")")]),t._v(" "),v("li",[v("code",[t._v("git add .")])]),t._v(" "),v("li",[v("code",[t._v('git commit -m " commit ....."')])]),t._v(" "),v("li",[v("code",[t._v("git push")])])]),t._v(" "),v("p",[t._v("push 之后其他开发人员 pul l之后, ignore 规则就对其生效了.")]),t._v(" "),v("p",[t._v("注意上传到 gitlab 中的文件需要手动删除，下次 push 或 pull 之后 ignore 文件便可生效。")]),t._v(" "),v("h3",{attrs:{id:"q2-提交的唯一标识id-head-n是什么意思"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q2-提交的唯一标识id-head-n是什么意思"}},[t._v("#")]),t._v(" Q2. 提交的唯一标识id，HEAD~n是什么意思？")]),t._v(" "),v("p",[t._v("每一个提交都有一个唯一标识，主要就是提交的"),v("code",[t._v("hash")]),t._v("值"),v("code",[t._v("commit id")]),t._v("，在很多指令中会用到，如版本回退、拣选提交等，需要指定一个提交。那标识唯一提交有两种方式：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("首先就是"),v("code",[t._v("commit id")]),t._v("，一个40位编码，指令中使用的时候可以只输入前几位（6位）即可。")])]),t._v(" "),v("li",[v("p",[t._v("还有一种就是 "),v("code",[t._v("HEAD~n")]),t._v("，是基于当前 "),v("code",[t._v("HEAD")]),t._v(" 位置的一个相对坐标。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("HEAD")]),t._v(" 表示当前分支的最新版本，是比较常用的参数。")]),t._v(" "),v("li",[v("code",[t._v("HEAD^")]),t._v("上一个版本，"),v("code",[t._v("HEAD^^")]),t._v(" 上上一个版本。")]),t._v(" "),v("li",[v("code",[t._v("HEAD~")]),t._v(" 或"),v("code",[t._v("HEAD~1")]),t._v(" 表示上一个版本，以此类推，"),v("code",[t._v("HEAD^10")]),t._v(" 为最近第10个版本。")]),t._v(" "),v("li",[v("code",[t._v("HEAD@{2}")]),t._v("在"),v("code",[t._v("git reflog")]),t._v("日志中标记的提交记录索引。\n通过 "),v("code",[t._v("git log")]),t._v("、"),v("code",[t._v("git reflog")]),t._v("可以查看历史日志，可以看每次提交的唯一编号（hash）。区别是 "),v("code",[t._v("git reflog")]),t._v(" 可以查看所有操作的记录（实际是HEAD变更记录），包括被撤销回退的提交记录。")])])])]),t._v(" "),v("h3",{attrs:{id:"q3-关于分支切换指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q3-关于分支切换指令"}},[t._v("#")]),t._v(" Q3. 关于分支切换指令")]),t._v(" "),v("p",[v("code",[t._v("checkout")]),t._v("是Git的底层指令，比较常用，也比较危险，他会重写工作区。支持的功能比较多，能撤销修改，能切换分支，这也导致了这个指令比较复杂。在Git 2.23版本以后，增加了"),v("code",[t._v("git switch")]),t._v("、"),v("code",[t._v("git reset")]),t._v("指令。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git switch")]),t._v("：专门用来实现分支切换。")]),t._v(" "),v("li",[v("code",[t._v("git reset")]),t._v("：专门用来实现本地修改的撤销，更多可参考后续“reset”内容。")])]),t._v(" "),v("p",[v("strong",[t._v("切换时还没提交的代码怎么办？")])]),t._v(" "),v("ul",[v("li",[t._v("如果修改（包括未暂存、已暂存）和待切换的分支没有冲突，则切换成果，且未提交修改会一起带过去，所以要注意！")]),t._v(" "),v("li",[t._v("如果有冲突，则会报错，提示先提交或隐藏，关于隐藏可查看后续章节内容“stash”。")])]),t._v(" "),v("h3",{attrs:{id:"q4-fetch-与-pull-有什么不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q4-fetch-与-pull-有什么不同"}},[t._v("#")]),t._v(" Q4. fetch 与 pull 有什么不同？")]),t._v(" "),v("p",[t._v("两者都是从服务端获取更新，主要区别是"),v("code",[t._v("fetch")]),t._v("不会自动合并，不会影响当前工作区内容。")]),t._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch + "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[v("code",[t._v("git fetch")]),t._v("只获取了更新，并未影响"),v("code",[t._v("master")]),t._v("、"),v("code",[t._v("HEAD")]),t._v("的位置。要更新"),v("code",[t._v("master")]),t._v("、"),v("code",[t._v("HEAD")]),t._v("的位置需要手动执行"),v("code",[t._v("git merge")]),t._v("合并。而 "),v("code",[t._v("git pull")]),t._v("是在 "),v("code",[t._v("fetch")]),t._v(" 的基础上，把拉取的分支与当前分支进行 "),v("code",[t._v("merge")])]),t._v(" "),v("h3",{attrs:{id:"q5-git-在-pull-后想要回滚到之前版本怎么办"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q5-git-在-pull-后想要回滚到之前版本怎么办"}},[t._v("#")]),t._v(" Q5. git 在 pull 后想要回滚到之前版本怎么办？")]),t._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地 master 分支历史变动纪录")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog master\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 git reset --hard 恢复到之前位置）")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("COMMIT_ID"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" master@"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("h3",{attrs:{id:"q6-如何撤销提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q6-如何撤销提交"}},[t._v("#")]),t._v(" Q6. 如何撤销提交？")]),t._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到上次 git commit 的 id")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看列表里的内容并直接复制 commit id")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果想撤销提交到索引区的文件")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v("  commit_id\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果想撤销提交到本地仓库的文件")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复当前分支的版本库至上一次提交的状态，索引区和工作空间不变更")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset –soft HEAD^n\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复当前分支的版本库、索引区和工作空间至上一次提交的状态")]),t._v("\n$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset –hard HEAD^n\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br")])]),v("h3",{attrs:{id:"q7-为什么会出现文件版本冲突-如何解决冲突问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q7-为什么会出现文件版本冲突-如何解决冲突问题"}},[t._v("#")]),t._v(" Q7. 为什么会出现文件版本冲突，如何解决冲突问题")]),t._v(" "),v("p",[t._v("文件版本冲突，本质上就是多个开发人员同时提交了未及时更新的相同文件，导致版本库中出现了相同版本的不同文件出现了冲突问题。例如，在合并分支的时候，master 分支和 dev 分支恰好有人都修改了同一个文件，两个分支相同文件相同位置的的不同操作。")]),t._v(" "),v("p",[t._v("冲突解决办法：")]),t._v(" "),v("p",[t._v("对比本地文件和远程分支的文件，然后把远程分支上文件的内容手工修改到本地文件，然后再提交冲突的文件使其保证与远程分支的文件一致，这样才会消除冲突，然后再提交自己修改的部分。")]),t._v(" "),v("p",[t._v("特别要注意下，修改本地冲突文件使其与远程仓库的文件保持一致后，需要提交后才能消除冲突，否则无法继续提交。必要时可与同事交流，消除冲突。")]),t._v(" "),v("ul",[v("li",[t._v("通过"),v("code",[t._v("git stash")]),t._v("命令，把工作区的修改提交到栈区，目的是保存工作区的修改；")]),t._v(" "),v("li",[t._v("通过"),v("code",[t._v("git pull")]),t._v("命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突；")]),t._v(" "),v("li",[t._v("通过"),v("code",[t._v("git stash pop")]),t._v("命令，把保存在栈区的修改部分合并到最新的工作空间中；")])]),t._v(" "),v("h3",{attrs:{id:"q8-git-rebase-的作用是什么-什么什么时候用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q8-git-rebase-的作用是什么-什么什么时候用"}},[t._v("#")]),t._v(" Q8. git rebase 的作用是什么，什么什么时候用?")]),t._v(" "),v("p",[v("code",[t._v("git rebase")]),t._v("作用主要有两方面")]),t._v(" "),v("ul",[v("li",[t._v("通过 "),v("code",[t._v("rebase")]),t._v(" 命令本地多次提交记录进行合并，然后推送到远程仓库，让远程仓库的版本树/版本记录比较干净和整洁")]),t._v(" "),v("li",[t._v("在多分支开发模式下，如 "),v("code",[t._v("bug")]),t._v(" 修复分支中出现了三个非常重要的版本修复记录，合并到 "),v("code",[t._v("dev")]),t._v(" 开发分支时期望保留这三个修复记录的版本，此时可以通过 "),v("code",[t._v("rebase")]),t._v(" 命令将多个提交版本从一个分支直接合并到另一个分支")])]),t._v(" "),v("h3",{attrs:{id:"q9-git-stash-命令的作用是什么-什么什么时候用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q9-git-stash-命令的作用是什么-什么什么时候用"}},[t._v("#")]),t._v(" Q9. git stash 命令的作用是什么，什么什么时候用?")]),t._v(" "),v("p",[v("code",[t._v("git stash")]),t._v(" 命令主要用于版本提交历史中进行文件缓存使用的，用于临时存储暂存区文件")]),t._v(" "),v("ul",[v("li",[t._v("解决冲突文件时，会先执行 git stash，临时存储当前冲突文件内容，保障项目版本正确性的前提下解决冲突；")]),t._v(" "),v("li",[t._v("遇到紧急开发任务但目前任务不能提交时，会先执行 "),v("code",[t._v("git stash")]),t._v("，然后进行紧急任务的开发，然后通过"),v("code",[t._v("git stash pop")]),t._v("取出栈区的内容继续开发；")]),t._v(" "),v("li",[t._v("切换分支时，当前工作空间内容不能提交时，会先执行"),v("code",[t._v("git stash")]),t._v("再进行分支切换；")])]),t._v(" "),v("h3",{attrs:{id:"q10-merge-与-rebase-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q10-merge-与-rebase-区别"}},[t._v("#")]),t._v(" Q10. merge 与 rebase 区别")]),t._v(" "),v("p",[v("code",[t._v("git merge")]),t._v(" 和 "),v("code",[t._v("git rebase")]),t._v(" 都是合并分支的命令。")]),t._v(" "),v("p",[t._v("marge 特点")]),t._v(" "),v("ul",[v("li",[t._v("自动创建一个新的 commit")]),t._v(" "),v("li",[t._v("如果合并的时候遇到冲突，仅需要修改后重新 commit")])]),t._v(" "),v("p",[t._v("marge 优缺点")]),t._v(" "),v("ul",[v("li",[t._v("优点：记录了真实的 commit 情况，包括每个分支的详情")]),t._v(" "),v("li",[t._v("缺点：因为每次 "),v("code",[t._v("merge")]),t._v(" 会自动产生一个 "),v("code",[t._v("merge commit")]),t._v("，commit 比较频繁时，看到分支很杂乱。")])]),t._v(" "),v("p",[t._v("rebase 特点：")]),t._v(" "),v("ul",[v("li",[t._v("会合并之前的 commit 历史")]),t._v(" "),v("li",[t._v("rebase 将所有 master 的 commit 移动到你的 feature 的顶端。问题是：其他人还在 original master 上开发，由于你使用了 rebase 移动了 master，git 会认为你的主分支的历史与其他人的有分歧，会产生冲突。")]),t._v(" "),v("li",[t._v("rebase 本质找公共祖先")])]),t._v(" "),v("p",[t._v("rebase 优缺点：")]),t._v(" "),v("ul",[v("li",[t._v("优点：得到更简洁的项目历史，去掉了merge commit")]),t._v(" "),v("li",[t._v("缺点：如果合并出现代码问题不容易定位，因为re-write了history")])]),t._v(" "),v("p",[t._v("merge 与 rebase 区别：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git merge branch")]),t._v("会把 "),v("code",[t._v("branch分支")]),t._v(" 的差异内容 "),v("code",[t._v("pull")]),t._v(" 到本地，然后与本地分支的内容一并形成一个 "),v("code",[t._v("committer")]),t._v(" 对象提交到主分支上，合并后的分支与主分支一致。即，将两个分支的历史合并到一起，现在的分支不会被更改，它会比对双方不同的文件缓存下来，生成一个commit，去push。")]),t._v(" "),v("li",[v("code",[t._v("git rebase branch")]),t._v(" 会把 "),v("code",[t._v("branch分支")]),t._v(" 优先合并到主分支，然后把本地分支的 "),v("code",[t._v("commit")]),t._v(" 放到主分支后面，合并后的分支就好像从合并后主分支又拉了一个分支一样，本地分支本身不会保留提交历史。即，提交修改历史，比对双方的 commit，然后找出不同的去缓存，然后去 push，修改 commit 历史。")]),t._v(" "),v("li",[t._v("如果你想要一个干净的，没有 "),v("code",[t._v("merge commi")]),t._v(" t的线性历史树，那么你应该选择 "),v("code",[t._v("git rebase")])]),t._v(" "),v("li",[t._v("如果你想保留完整的历史记录，并且想要避免重写 "),v("code",[t._v("commit history")]),t._v(" 的风险，你应该选择使用"),v("code",[t._v("git merge")])]),t._v(" "),v("li",[t._v("下游分支更新上游分支内容的时候使用 "),v("code",[t._v("rebase")])]),t._v(" "),v("li",[t._v("上游分支合并下游分支内容的时候使用 "),v("code",[t._v("merge")])]),t._v(" "),v("li",[t._v("更新当前分支的内容时一定要使用 "),v("code",[t._v("--rebase")]),t._v(" 参数")]),t._v(" "),v("li",[t._v("更新当前分支代码的时候一定要使用 "),v("code",[t._v("git pull origin xxx --rebase")])]),t._v(" "),v("li",[t._v("合并代码的时候按照最新分支优先合并为原则")]),t._v(" "),v("li",[t._v("要经常从上游分支更新代码，如果长时间不更新上游分支代码容易出现大量冲突")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/34197548",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用rebase和merge的正确姿势"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"q11-fork、-branch、clone-之间的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q11-fork、-branch、clone-之间的区别"}},[t._v("#")]),t._v(" Q11. fork、 branch、clone 之间的区别？")]),t._v(" "),v("ul",[v("li",[t._v("fork：是对存储仓库（repository）进行的远程的，服务器端的拷贝。fork 不是 git 范畴。")]),t._v(" "),v("li",[t._v("clone：克隆是对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个存储仓库，包括所有的历史记录和分支。")]),t._v(" "),v("li",[t._v("branch：是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。")])]),t._v(" "),v("h3",{attrs:{id:"q12-git-cherry-pick-有什么作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q12-git-cherry-pick-有什么作用"}},[t._v("#")]),t._v(" Q12. git cherry-pick，有什么作用？")]),t._v(" "),v("p",[v("code",[t._v("git cherry-pick")]),t._v(" 可以把 "),v("code",[t._v("branch A")]),t._v(" 的 "),v("code",[t._v("commit")]),t._v("  复制到 "),v("code",[t._v("branch B")]),t._v(" 上。在 "),v("code",[t._v("branch B")]),t._v(" 上进行命令操作：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("复制单个提交："),v("code",[t._v("git cherry-pick commitId")])])]),t._v(" "),v("li",[v("p",[t._v("复制多个提交："),v("code",[t._v("git cherry-pick commitId1…commitId3")])])])]),t._v(" "),v("p",[t._v("注意：复制多个提交的命令不包含 "),v("code",[t._v("commitId1")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/7111132724185792542#heading-30",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习 Git，看这一篇就够了"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/7195030726096453690#heading-21",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git入门图文教程"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=s.exports}}]);