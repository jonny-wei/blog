(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{497:function(t,v,s){"use strict";s.r(v);var _=s(14),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("了解 "),s("strong",[t._v("事件循环")]),t._v(" 前，有必要先了解浏览器进程，浏览器渲染进程下的多线程， js 为什么采用单线程。 具体见 "),s("a",{attrs:{href:"../browser/browser-render"}},[t._v("浏览器渲染")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/images/javascript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png",alt:"事件循环"}})]),t._v(" "),s("p",[t._v("JavaScript代码的执行过程中，除了依靠函数调用栈来搞定函数的执行顺序外，还依靠任务队列(task queue)来搞定另外一些代码的执行。整个执行过程，我们称为"),s("strong",[t._v("事件循环过程")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"事件循环机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),s("p",[t._v("Chrome 中的事件循环：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/images/javascript/chrome%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png",alt:"chrome事件循环"}})]),t._v(" "),s("p",[t._v("现在知道页面主线程是如何接收外部任务了：如果其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程")]),t._v(" "),s("p",[t._v("chromium 内核基本的事件循环系统：")]),t._v(" "),s("ul",[s("li",[t._v("JavaScript V8引擎在渲染进程的主线程上工作")]),t._v(" "),s("li",[t._v("主线程有循环机制，能在线程运行过程中，能接收并执行新的任务")]),t._v(" "),s("li",[t._v("交给主线程执行的任务会先放入任务队列中，等待主线程空闲后依次调用")]),t._v(" "),s("li",[t._v("渲染进程会有一个 IO 线程：IO 线程负责和其它进程 IPC 通信，接收其他进程传进来的消息")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("事件循环执行流程")]),t._v(" "),s("ol",[s("li",[t._v("检查 Macrotask 队列是否为空，若不为空，则进行下一步，若为空，则跳到 3")]),t._v(" "),s("li",[t._v("从 Macrotask 队列中取队首(在队列时间最长)的任务进去执行栈中执行(仅仅一个)，执行完后进入下一步")]),t._v(" "),s("li",[t._v("检查 Microtask 队列是否为空，若不为空，则进入下一步，否则，跳到 1（开始新的事件循环）")]),t._v(" "),s("li",[t._v("从 Microtask 队列中取队首(在队列时间最长)的任务进去事件队列执行，执行完后，跳到 3 其中，在执行代码过程中新增的 microtask 任务会在当前事件循环周期内执行，而新增的 macrotask 任务只能等到下一个事件循环才能执行了。")])])]),t._v(" "),s("p",[t._v("页面线程所有执行的任务都来自于任务队列。任务队列是“先进先出”的，也就是说放入队列中的任务，需要等待前面的任务被执行完，才会被执行。这就导致两个问题了：")]),t._v(" "),s("ul",[s("li",[t._v("如何处理高优先级的任务？")]),t._v(" "),s("li",[t._v("如何处理执行时间长的任务？")])]),t._v(" "),s("h2",{attrs:{id:"处理高优先级的任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理高优先级的任务"}},[t._v("#")]),t._v(" 处理高优先级的任务")]),t._v(" "),s("p",[t._v("微任务。")]),t._v(" "),s("p",[t._v("解决方案 V8 引擎已经给出了：在每个任务内部，开辟一个属于该任务的队列(任务队列)，把需要兼顾实时性和效率的任务，先放到这个任务内部的队列中等待执行，等到当前任务快执行完准备退出前，执行该任务内部的队列。咱们把放入到这个特殊队列中的任务称为 "),s("strong",[t._v("微任务")]),t._v("。")]),t._v(" "),s("p",[t._v("这样既不会影响当前的任务又不会降低多少实时性。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/images/javascript/%E5%BE%AE%E4%BB%BB%E5%8A%A1.png",alt:"微任务"}})]),t._v(" "),s("ul",[s("li",[t._v("任务队列中的任务都是宏观任务")]),t._v(" "),s("li",[t._v("每个宏观任务都有一个自己的微任务队列")]),t._v(" "),s("li",[t._v("微任务在当前宏任务中的 JavaScript 快执行完成时，也就在 V8 引擎准备退出全局执行上下文并清空调用栈的时候，V8 引擎会检查全局执行上下文中的微任务队列，然后按照顺序执行队列中的微任务。")]),t._v(" "),s("li",[t._v("V8 引擎一直循环执行微任务队列中的任务，直到队列为空才算执行结束。也就是说在执行微任务过程中产生的新的微任务并不会推迟到下个宏任务中执行，而是在当前的宏任务中继续执行。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("宿主（如浏览器）发起的任务称为宏观任务\nJavaScript 引擎发起的任务称为微观任务")])]),t._v(" "),s("p",[t._v("一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为 "),s("strong",[t._v("macro-task（宏任务）")]),t._v(" 与 "),s("strong",[t._v("micro-task（微任务）")]),t._v("，在最新标准中，它们被分别称为 task 与 jobs。")]),t._v(" "),s("h3",{attrs:{id:"宏任务与微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务与微任务"}},[t._v("#")]),t._v(" 宏任务与微任务")]),t._v(" "),s("p",[s("strong",[t._v("macro-task 宏任务")]),t._v(" 大概包括：")]),t._v(" "),s("ul",[s("li",[t._v("script(整体代码)")]),t._v(" "),s("li",[t._v("setTimeout")]),t._v(" "),s("li",[t._v("setInterval")]),t._v(" "),s("li",[t._v("setImmediate")]),t._v(" "),s("li",[t._v("I/O")]),t._v(" "),s("li",[t._v("UI render")])]),t._v(" "),s("p",[s("strong",[t._v("micro-task 微任务")]),t._v(" 大概包括:")]),t._v(" "),s("ul",[s("li",[t._v("process.nextTick")]),t._v(" "),s("li",[t._v("Promise")]),t._v(" "),s("li",[t._v("Async/Await(实际就是promise)")]),t._v(" "),s("li",[t._v("MutationObserver(html5新特性)")]),t._v(" "),s("li",[t._v("Object.observe(已废弃)")])]),t._v(" "),s("h2",{attrs:{id:"处理执行时间长的任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理执行时间长的任务"}},[t._v("#")]),t._v(" 处理执行时间长的任务")]),t._v(" "),s("p",[t._v("回调。")]),t._v(" "),s("p",[t._v("要知道"),s("strong",[t._v("排版引擎 Blink")]),t._v(" 和 "),s("strong",[t._v("JavaScript引擎 V8")]),t._v(" 都工作在渲染进程的主线程上并且是互斥的。在单线程中，每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。这当然是非常糟糕的用户体验。想要避免这种问题，就需要用到回调来解决。")]),t._v(" "),s("p",[t._v("setTimeout/Promise 等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。来自不同任务源的任务会进入到不同的任务队列。其中 setTimeout 与 setInterval 是同源的。")]),t._v(" "),s("h2",{attrs:{id:"从底层看-settimeout-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从底层看-settimeout-实现"}},[t._v("#")]),t._v(" 从底层看 setTimeout 实现")]),t._v(" "),s("p",[t._v("到现在已经知道了，JS 世界是由事件循环和任务队列来驱动的。")]),t._v(" "),s("p",[t._v("setTimeout 大家都很熟悉，它是一个定时器，用来指定某个函数在多少毫秒后执行。那浏览器是怎么实现 setTimeout 的呢？")]),t._v(" "),s("p",[t._v("要搞清楚浏览器是怎么实现 setTimeout 就先要弄明白下面几个问题：")]),t._v(" "),s("ul",[s("li",[t._v("setTimeout 任务存到哪了？")]),t._v(" "),s("li",[t._v("setTimeout 到时间后怎么触发？")]),t._v(" "),s("li",[t._v("取消 setTimeout 是如何实现的？")])]),t._v(" "),s("h3",{attrs:{id:"settimeout-任务存到哪了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-任务存到哪了"}},[t._v("#")]),t._v(" setTimeout 任务存到哪了")]),t._v(" "),s("p",[t._v("首先要清楚，任务队列不止有一个，Chrome 还维护着一个"),s("strong",[t._v("延迟任务队列")]),t._v("，这个队列维护了需要延迟执行的任务，所以当你通过 Javascript 调用 setTimeout 时，渲染进程会将该定时器的回调任务添加到延迟任务队列中。")]),t._v(" "),s("p",[t._v("回调任务的信息包含：")]),t._v(" "),s("ul",[s("li",[t._v("回调函数")]),t._v(" "),s("li",[t._v("当前发起时间")]),t._v(" "),s("li",[t._v("延迟执行时间")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/images/javascript/setTimeout%E5%AD%98%E5%82%A8.png",alt:"setTimeout存储"}})]),t._v(" "),s("h3",{attrs:{id:"settimeout-到时间后怎么触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-到时间后怎么触发"}},[t._v("#")]),t._v(" setTimeout 到时间后怎么触发")]),t._v(" "),s("p",[t._v("当主线程执行完任务队列中的一个任务之后，主线程会对延迟任务队列中的任务，通过当前发起时间和延迟执行时间计算出已经到期的任务，然后依次的执行这些到期的任务，等到期的任务全部执行完后，主线程就进入到下一次循环中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/images/javascript/setTimeout%E8%A7%A6%E5%8F%91.png",alt:"setTimeout触发"}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("setTimeout 是如何实现的：")]),t._v(" "),s("ul",[s("li",[t._v("setTimeout存储到延迟任务队列中")]),t._v(" "),s("li",[t._v("当主线程执行完任务队列中的一个任务后，计算延迟任务队列中到期到任务，并执行所有到期任务")]),t._v(" "),s("li",[t._v("执行完所有到期任务后，让出主线程，进行下一次事件循环")])])]),t._v(" "),s("h2",{attrs:{id:"事件循环顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环顺序"}},[t._v("#")]),t._v(" 事件循环顺序")]),t._v(" "),s("p",[t._v("事件循环的顺序，决定了 JavaScript 代码的执行顺序。它从 script (整体代码) 开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的 micro-task。当所有可执行的 micro-task 执行完毕之后。循环再次从 macro-task 开始，找到其中一个任务队列执行完毕，然后再执行所有的 micro-task，这样一直循环下去。其中每一个任务的执行，无论是 macro-task 还是 micro-task，都是借助函数调用栈来完成。")]),t._v(" "),s("p",[t._v("总的结论就是，执行宏任务，然后执行该宏任务产生的微任务，若微任务在执行过程中产生了新的微任务，则继续执行微任务，微任务执行完毕后，再回到宏任务中进行下一轮循环。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("参考文献")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/4BLQQK8cTec_fQrklf2Qbg",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解JS的事件循环"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/PBX_YHw0-f3bbSDH5ZbbJQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件循环机制的那些事"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/DQdVxdHq36lGNhB3JEh_kw",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 事件循环详解(翻译)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/qWzxfbrD2LnaI_90Gqm9pw",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入解析Node.js事件循环工作机制"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/QgfE5Km1xiEkQqADMLmj-Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("说说事件循环机制(满分答案来了)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844904004745592846",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解Event Loop"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903512845860872",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底弄懂 JavaScript 执行机制"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);