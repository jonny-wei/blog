(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{477:function(t,s,a){"use strict";a.r(s);var e=a(15),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"web-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),a("h2",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("Web Worker 作为浏览器多线程技术，在当下，成为缓解页面卡顿,，提升应用性能的可选方案。Web Worker 实现了多线程运行 JS 能力，使 JS 可以并行执行，进而提升执行效率，加之运行任务拆分，减少页面卡顿。")]),t._v(" "),a("p",[t._v("由于 JavaScript 语言采用的是单线程，同一时刻只能做一件事，如果有多个同步计算任务执行，则在这段同步计算逻辑执行完之前，它下方的代码不会执行，从而造成了阻塞，用户的交互也可能无响应。但如果把这段同步计算逻辑放到 Web Worker 执行，在这段逻辑计算运行期间依然可以执行它下方的代码，用户的操作也可以响应了。"),a("strong",[t._v("Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行")]),t._v("。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程就会很流畅，不会被阻塞或拖慢。")]),t._v(" "),a("h4",{attrs:{id:"多线程与主线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程与主线程"}},[t._v("#")]),t._v(" 多线程与主线程")]),t._v(" "),a("p",[t._v("Web Worker 会创建操作系统级别的线程。JS 多线程, 是有独立于主线程的 JS 运行环境。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/architecture/webworker1.png",alt:"webworker1"}})]),t._v(" "),a("p",[t._v("如图所示:，Worker 线程有独立的内存空间, "),a("code",[t._v("Message Queue")]),t._v(", "),a("code",[t._v("Event Loop")]),t._v(", "),a("code",[t._v("Call Stack")]),t._v(" 等, 线程间通过 "),a("code",[t._v("postMessage")]),t._v(" 通信。")]),t._v(" "),a("p",[a("strong",[t._v("Web Worker 多线程并发与异步编程中的并发之间的区别")]),t._v("：")]),t._v(" "),a("p",[t._v('Web Worker 多个线程可以并发运行 JS。这里不同于 JS 异步编程中的并发（Promise.all），JS 单线程中的"并发", 准确来说是 Concurrent。运行时只有一个函数调用栈, 通过 Event Loop 实现不同 Task 的上下文切换(Context Switch)。这些 Task 通过 BOM API 调起其他线程为主线程工作，但回调函数代码逻辑依然由 JS 串行运行。')]),t._v(" "),a("p",[t._v("Web Worker 是 JS 多线程运行技术, 准确来说是 Parallel。其与 Concurrent 的区别在于 Parallel 有多个函数调用栈， 每个函数调用栈可以独立运行 Task，互不干扰。")]),t._v(" "),a("h3",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("p",[t._v("Web Worker 规范中包括（不包括 "),a("code",[t._v("Service Worker")]),t._v("）:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("DedicatedWorker")]),t._v("（专用线程）：简称 Worker, 其线程只能与一个页面渲染进程(Render Process)进行绑定和通信, 不能多 Tab 共享。"),a("code",[t._v("DedicatedWorker")]),t._v(" 是最早实现并最广泛支持的 Web Worker 能力。")])]),t._v(" "),a("li",[a("p",[t._v("SharedWorker（共享线程）：可以在多个浏览器 Tab 中访问到同一个 Worker 实例，实现多 Tab 共享数据，共享 "),a("code",[t._v("webSocket")]),t._v(" 连接等。看起来很美好， 但 safari 放弃了 "),a("code",[t._v("SharedWorker")]),t._v(" 支持，因为 "),a("code",[t._v("webkit")]),t._v(" 引擎的技术原因。")])])]),t._v(" "),a("p",[t._v("本文后面讨论中的 Worker 都是特指 "),a("code",[t._v("DedicatedWorker")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"使用限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用限制"}},[t._v("#")]),t._v(" 使用限制")]),t._v(" "),a("p",[t._v("Worker 运行环境与主线程的共同点主要包括:")]),t._v(" "),a("ul",[a("li",[t._v("包含完整的 JS 运行时, 支持 ECMAScript 规范定义的语言语法和内置对象.")]),t._v(" "),a("li",[t._v("支持 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FXMLHttpRequest",target:"_blank",rel:"noopener noreferrer"}},[t._v("XmlHttpRequest"),a("OutboundLink")],1),t._v(", 能独立发送网络请求与后台交互.")]),t._v(" "),a("li",[t._v("包含"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWorkerLocation",target:"_blank",rel:"noopener noreferrer"}},[t._v("只读的 Location"),a("OutboundLink")],1),t._v(", 指向 Worker 线程执行的 script url, 可通过 url 传递参数给 Worker 环境.")]),t._v(" "),a("li",[t._v("包含"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWorkerNavigator",target:"_blank",rel:"noopener noreferrer"}},[t._v("只读的 Navigator"),a("OutboundLink")],1),t._v(", 用于获取浏览器信息, 如通过 "),a("code",[t._v("Navigator.userAgent")]),t._v(" 识别浏览器.")]),t._v(" "),a("li",[t._v("支持 setTimeout / setInterval 计时器, 可用于实现异步逻辑.")]),t._v(" "),a("li",[t._v("支持 WebSocket 进行网络 I/O; 支持 IndexedDB 进行文件 I/O.")])]),t._v(" "),a("p",[t._v("从共同点上看, Worker 线程其实很强大, 除了利用独立线程执行重度逻辑外, 其网络 I/O 和文件 I/O 能力给业务和技术方案带来很大的想象空间")]),t._v(" "),a("p",[t._v("另一方面, Worker 线程运行环境和主线程的差异点有:")]),t._v(" "),a("ul",[a("li",[t._v("Worker 线程没有 DOM API, 无法新建和操作 DOM; 也无法访问到主线程的 DOM Element.")]),t._v(" "),a("li",[t._v("Worker 线程和主线程间内存独立, Worker 线程无法访问页面上的全局变量(window, document 等)和 JS 函数.")]),t._v(" "),a("li",[t._v("Worker 线程不能调用 alert() 或 confirm() 等 UI 相关的 BOM API.")]),t._v(" "),a("li",[t._v("Worker 线程被主线程控制, 主线程可以新建和销毁 Worker.")]),t._v(" "),a("li",[t._v("Worker 线程可以通过 "),a("code",[t._v("self.close")]),t._v(" 自行销毁.")])]),t._v(" "),a("p",[t._v("从差异点上看, Worker 线程无法染指 UI, 并受主线程控制, 适合默默干活.")]),t._v(" "),a("h4",{attrs:{id:"同源限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源限制"}},[t._v("#")]),t._v(" 同源限制")]),t._v(" "),a("p",[t._v("分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。")]),t._v(" "),a("h4",{attrs:{id:"文件限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件限制"}},[t._v("#")]),t._v(" 文件限制")]),t._v(" "),a("p",[t._v("Worker 线程无法读取本地文件（"),a("code",[t._v("file://")]),t._v("），会拒绝使用 file 协议来创建 Worker实例，它所加载的脚本，必须来自网络。")]),t._v(" "),a("h4",{attrs:{id:"dom-操作限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-操作限制"}},[t._v("#")]),t._v(" DOM 操作限制")]),t._v(" "),a("p",[t._v("Worker 线程所在的全局对象，与主线程不一样，区别是：")]),t._v(" "),a("ul",[a("li",[t._v("无法读取主线程所在网页的 DOM 对象")]),t._v(" "),a("li",[t._v("无法使用"),a("code",[t._v("document")]),t._v("、"),a("code",[t._v("window")]),t._v("、"),a("code",[t._v("parent")]),t._v("这些对象")])]),t._v(" "),a("h4",{attrs:{id:"通信限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通信限制"}},[t._v("#")]),t._v(" 通信限制")]),t._v(" "),a("p",[t._v("Worker 线程和主线程不在同一个上下文环境，它们"),a("strong",[t._v("不能直接通信")]),t._v("，必须通过消息完成，交互方法是"),a("code",[t._v("postMessage")]),t._v("和"),a("code",[t._v("onMessage")]),t._v("，并且在数据传递的时候， Worker 是使用"),a("strong",[t._v("拷贝")]),t._v("的方式。")]),t._v(" "),a("h4",{attrs:{id:"脚本限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本限制"}},[t._v("#")]),t._v(" 脚本限制")]),t._v(" "),a("p",[t._v("Worker 线程不能执行"),a("code",[t._v("alert()")]),t._v("方法和"),a("code",[t._v("confirm()")]),t._v("方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求，也可以使用"),a("code",[t._v("setTimeout/setInterval")]),t._v("等API")]),t._v(" "),a("h2",{attrs:{id:"使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),a("h3",{attrs:{id:"基本-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本-api"}},[t._v("#")]),t._v(" 基本 API")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("worker.postMessage")]),t._v(": 向 worker 的内部作用域发送一个消息，消息可由任何 JavaScript 对象组成")]),t._v(" "),a("li",[a("code",[t._v("worker.terminate")]),t._v(": 立即终止 worker。该方法并不会等待 worker 去完成它剩余的操作；worker 将会被立刻停止")]),t._v(" "),a("li",[a("code",[t._v("worker.onmessage")]),t._v(":当 worker 的父级接收到来自其 worker 的消息时，会在 Worker 对象上触发 message 事件")]),t._v(" "),a("li",[a("code",[t._v("worker.onerror")]),t._v(": 当 worker 出现运行中错误时，它的 onerror 事件处理函数会被调用。它会收到一个扩展了 ErrorEvent 接口的名为 error 的事件")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可读性良好的错误消息")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发生错误的脚本文件名")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lineno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发生错误时所在脚本文件的行号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("主要流程为:")]),t._v(" "),a("ol",[a("li",[t._v("主线程调用 "),a("code",[t._v("new Worker(url)")]),t._v(" 创建 Worker 实例, "),a("code",[t._v("url")]),t._v(" 为 Worker JS 资源 url。")]),t._v(" "),a("li",[t._v("主线程调用 "),a("code",[t._v("postMessage")]),t._v(" 发送消息, 在 "),a("code",[t._v("onmesssage")]),t._v(" 中监听 Worker 线程消息。")]),t._v(" "),a("li",[t._v("Worker 线程在 "),a("code",[t._v("onmessage")]),t._v(" 中监听主线程消息, 收到主线程的消息; 通过 "),a("code",[t._v("postMessage")]),t._v(" 回复。")]),t._v(" "),a("li",[t._v("主线程在消息回调中收到 Worker 的信息。")])]),t._v(" "),a("p",[t._v("postMessage 会在接收线程创建一个MessageEvent, 传递的数据添加到 "),a("code",[t._v("event.data")]),t._v(", 再触发该事件; MessageEvent 的回调函数进入 Message Queue, 成为"),a("strong",[t._v("待执行的宏任务")]),t._v(". 因此 postMessage "),a("strong",[t._v("顺序发送")]),t._v("的信息, 在接收线程中会"),a("strong",[t._v("顺序执行回调函数")]),t._v(". 而且我们无需担心实例化 Worker 过程中 postMessage 的信息丢失问题, 对此 Worker 内部机制已经处理.")]),t._v(" "),a("p",[t._v("Worker 事件驱动(postMessage/onmessage) 的通信 API 虽然简洁, 但大多数场景下通信需要等待响应(类似 HTTP 请求的 Request 和 Response), 并且多次同类型通信要匹配到各自的响应. 所以业务使用一般会封装原生 API, 如封装为 Promise 调用。")]),t._v(" "),a("h3",{attrs:{id:"直接指定脚本文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接指定脚本文件"}},[t._v("#")]),t._v(" 直接指定脚本文件")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myWorker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("code",[t._v("aURL")]),t._v("表示 worker 将执行的脚本的 URL（脚本文件）， 即 Web Worker 所要执行的任务。案例如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程下创建worker线程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./worker.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听接收worker线程发的消息")]),t._v("\nworker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主线程收到worker线程消息：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向worker线程发送消息")]),t._v("\nworker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主线程发送hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// worker.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// self 代表子线程自身，即子线程的全局对象")]),t._v("\nself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.data表示主线程发送过来的数据")]),t._v("\n  self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker线程收到的："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向主线程发送消息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("Web Worker 的执行上下文名称是 self，无法调用主线程的 window 对象的。上述写法等同于以下写法：")]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.data表示主线程发送过来的数据")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker线程收到的："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向主线程发送消息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将JS文件引入html挂在本地开发环境运行，运行结果如下：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程收到 worker 线程消息： worker 线程收到的：主线程发送 hello world ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"使用-blob-url-创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-blob-url-创建"}},[t._v("#")]),t._v(" 使用 Blob URL 创建")]),t._v(" "),a("p",[t._v("除了这种通过引入js文件的方式，也可以通过"),a("code",[t._v("URL.createObjectURL()")]),t._v("创建URL对象，创建内嵌的worker")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * const blob = new Blob(array, options);\n * Blob() 构造函数返回一个新的 Blob 对象。blob 的内容由参数数组中给出的值的串联组成。\n * @params array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array\n * @options type，默认值为 ""，它代表了将会被放入到 blob 中的数组内容的 MIME 类型。还有两个这里忽略不列举了\n */')]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * URL.createObjectURL()：静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createObjectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWorker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const blob = new Blob([fn.toString() + ' fn()'], { type: 'text/javascript' })")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" blob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Blob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")()")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createObjectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWorker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("h3",{attrs:{id:"worker-线程中引入其他脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-线程中引入其他脚本"}},[t._v("#")]),t._v(" Worker 线程中引入其他脚本")]),t._v(" "),a("p",[t._v("Worker线程内部要加载其他脚本，可以使用 "),a("code",[t._v("importScripts()")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// worker.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("importScripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"constants.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// self 代表子线程自身，即子线程的全局对象")]),t._v("\nself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可拿到 `foo`、`getAge()`、`getName`的结果值 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// constants.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"变量"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getName")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jacky"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("还可以同时加载多个脚本")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("importScripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script1.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script2.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Worker 多线程虽然实现了 JS 任务的并行运行, 也带来额外的"),a("strong",[t._v("通信开销")]),t._v("。在线程计算能力固定的情况下, 要通过多线程提升更多性能, 需要尽量"),a("strong",[t._v("减少通信消耗")]),t._v("。而且主线程 postMessage 会占用主线程同步执行, "),a("strong",[t._v("占用时间与数据传输方式和数据规模相关")]),t._v(". 要避免多线程通信导致的主线程卡顿, 需选择合适的传输方式, 并控制每个渲染周期内的数据传输规模。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/architecture/webworker2.png",alt:"webworker2"}})]),t._v(" "),a("h3",{attrs:{id:"数据传输方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据传输方式"}},[t._v("#")]),t._v(" 数据传输方式")]),t._v(" "),a("p",[t._v("我们先来聊聊主线程和 Worker 线程的数据传输方式。根据计算机进程模型, 主线程和 Worker 线程属于同一进程, 可以访问和操作进程的内存空间. 但为了降低多线程并发的逻辑复杂度, 部分传输方式直接隔离了线程间的内存, 相当于默认加了锁。通信方式有 3 种:")]),t._v(" "),a("ul",[a("li",[t._v("Structured Clone,")]),t._v(" "),a("li",[t._v("Transfer Memory")]),t._v(" "),a("li",[t._v("Shared Array Buffer.")])]),t._v(" "),a("h4",{attrs:{id:"structured-clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structured-clone"}},[t._v("#")]),t._v(" Structured Clone")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWeb_Workers_API%2FStructured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Structured Clone"),a("OutboundLink")],1),t._v(" 是 postMessage 默认的通信方式。复制一份线程A 的 JS Object 内存给到线程B, 线程B 能获取和操作新复制的内存。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/architecture/webworker3.png",alt:"webworker3"}})]),t._v(" "),a("p",[t._v("Structured Clone 通过复制内存的方式简单有效地隔离不同线程内存, 避免冲突; 且传输的 Object 数据结构很灵活. 但复制过程中, 线程A 要"),a("strong",[t._v("同步执行")]),t._v(" Object Serialization, 线程B 要"),a("strong",[t._v("同步执行")]),t._v(" Object Deserialization; 如果 Object 规模过大, 会占用大量的线程时间.")]),t._v(" "),a("h4",{attrs:{id:"transfer-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-memory"}},[t._v("#")]),t._v(" Transfer Memory")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FTransferable",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transfer Memory"),a("OutboundLink")],1),t._v(" 意为转移内存, 它不需要 Serialization/Deserialization, 能大大减少传输过程占用的线程时间. 如下图所示 , 线程A 将指定内存的所有权和操作权转给线程B, 但转让后线程A 无法再访问这块内存.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/architecture/webworker4.png",alt:"webworker4"}})]),t._v(" "),a("p",[t._v("Transfer Memory "),a("strong",[t._v("以失去控制权来换取高效传输")]),t._v(", 通过内存独占给多线程并发加锁. 但只能转让 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("ArrayBuffer"),a("OutboundLink")],1),t._v(" 等大小规整的二进制(Raw Binary)数据; 对矩阵数据(如 RGB 图片)比较适用. 实践上也要考虑从 JS Object 生成二进制数据的运算成本.")]),t._v(" "),a("h4",{attrs:{id:"shared-array-buffers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shared-array-buffers"}},[t._v("#")]),t._v(" Shared Array Buffers")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FSharedArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shared Array Buffer"),a("OutboundLink")],1),t._v(" 是共享内存, 线程A 和线程B 可以"),a("strong",[t._v("同时访问和操作")]),t._v("同一块内存空间. 数据都共享了, 也就没有传输什么事了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/images/architecture/webworker5.png",alt:"webworker5"}})]),t._v(" "),a("p",[t._v("但多个并行的线程共享内存, 会产生竞争问题(Race Conditions). 不像前 2 种传输方式默认加锁, Shared Array Buffers 把难题抛给开发者, 开发者可以用 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FAtomics",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atomics"),a("OutboundLink")],1),t._v(" 来维护这块共享的内存. 作为较新的传输方式, 浏览器兼容性可想而知。")]),t._v(" "),a("h3",{attrs:{id:"传输方式小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输方式小结"}},[t._v("#")]),t._v(" 传输方式小结")]),t._v(" "),a("ul",[a("li",[t._v("全浏览器兼容的 Structured Clone 是较好的选择, 但要考虑数据传输规模, 下文我们会详细展开.")]),t._v(" "),a("li",[t._v("Transfer Memory 的兼容性也不错(IE11+), 但数据独占和数据类型的限制, 使得它是特定场景的最优解, 不是通用解;")]),t._v(" "),a("li",[t._v("Shared Array Buffers 当下糟糕的兼容性和线程锁的开发成本, 建议先暗中观察")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("Structured Clone")]),t._v(" 传输数据时, 有个阴影一直笼罩着我们: postMessage 前要不要对数据 JSON.stringify 一把, "),a("strong",[t._v("听说那样更快?")])]),t._v(" "),a("p",[t._v("相同的数据规模, 直接 postMessage 的传输时间普遍比 "),a("code",[t._v("JSON.stringify")]),t._v(" 更少。当下, "),a("strong",[t._v("不需要再使用 "),a("code",[t._v("JSON.stringify")])]),t._v(". 其一是 Structured Clone 内置的 "),a("code",[t._v("serialize/deserialize")]),t._v(" 比 "),a("code",[t._v("JSON.stringify")]),t._v(" 性能更高; 其二是 "),a("code",[t._v("JSON.stringify")]),t._v(" 只适合序列化基本数据类型, 而 Structured Clone 还支持复制其他内置数据类型(如 Map, Blob, RegExp 等, 虽然大部分应用场景只用到基本数据类型)")]),t._v(" "),a("p",[a("code",[t._v("Structured Clone")]),t._v(" 的 "),a("code",[t._v("serialize/deserialize")]),t._v(" 执行耗时"),a("strong",[t._v("主要受数据对象复杂度影响")]),t._v(", 这很好理解, 因为 "),a("code",[t._v("serialize/deserialize")]),t._v(" 至少要以某种方式遍历对象. 数据对象的复杂度本身难以度量, 可以用序列化后的数据规模(size)作为参考。")]),t._v(" "),a("p",[t._v("总之, 数据传输规模并没有最佳实践. 而是充分理解 Worker postMessage 的传输成本, 在实际应用中, 根据业务场景去评估和控制数据规模。")]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("h3",{attrs:{id:"减少卡顿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少卡顿"}},[t._v("#")]),t._v(" 减少卡顿")]),t._v(" "),a("p",[t._v("根据 Chrome 团队提出的用户感知性能模型 RAIL, 同步 JS 执行时间不能过长。量化来说, 播放动画时建议小于 16ms, 用户操作响应建议小于 100ms, 页面打开到开始呈现内容建议小于 1000ms。")]),t._v(" "),a("h3",{attrs:{id:"性能提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能提升"}},[t._v("#")]),t._v(" 性能提升")]),t._v(" "),a("h5",{attrs:{id:"逻辑异步化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑异步化"}},[t._v("#")]),t._v(" 逻辑异步化")]),t._v(" "),a("p",[t._v("减少主线程卡顿的主要方法为异步化执行, 比如播放动画时, 将同步任务拆分为多个小于 16ms 的子任务, 然后在页面每一帧前通过 requestAnimationFrame 按计划执行一个子任务, 直到全部子任务执行完毕。")]),t._v(" "),a("p",[t._v("拆分同步逻辑的异步方案对大部分场景有效果, 但并不是一劳永逸的银弹. 有以下几个问题:")]),t._v(" "),a("p",[t._v("不是所有 JS 逻辑都可拆分. 比如数组排序, 树的递归查找, 图像处理算法等, 执行中需要维护当前状态, 且调用上非线性, 无法轻易地拆分为子任务。")]),t._v(" "),a("p",[t._v("可以拆分的逻辑难以把控粒度. 拆分的子任务在高性能机器(iphoneX)上可以控制在 16ms 内, 但在性能落后机器(iphone6)上就超过了 deadline. 16ms 的用户感知时间, 并不会因为用户手上机器的差别而变化, Google 给出的建议是再拆小到 3-4ms。")]),t._v(" "),a("p",[t._v("拆分的子任务并不稳定. 对同步 JS 逻辑的拆分, 需要根据业务场景寻找原子逻辑, 而原子逻辑会跟随业务变化, 每次改动业务都需要去 review 原子逻辑。")]),t._v(" "),a("h5",{attrs:{id:"worker-一步到位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-一步到位"}},[t._v("#")]),t._v(" Worker 一步到位")]),t._v(" "),a("p",[t._v("Worker 的多线程能力, 使得同步 JS 任务的拆分一步到位: 从宏观上将整个同步 JS 任务异步化. 不需要再去苦苦寻找原子逻辑, 逻辑异步化的设计上也更加简单和可维护。")]),t._v(" "),a("p",[t._v("这给我们带来更多的想象空间. 在浏览器主线程渲染周期内, 将可能阻塞页面渲染的 JS 运行任务(Jank Job)迁移到 Worker 线程中, 进而减少主线程的负担, 缩短渲染间隔, 减少页面卡顿。")]),t._v(" "),a("h5",{attrs:{id:"性能提升-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能提升-2"}},[t._v("#")]),t._v(" 性能提升")]),t._v(" "),a("p",[t._v("Worker 多线程并不会直接带来计算性能的提升, 能否提升与设备 CPU 核数和线程策略有关")]),t._v(" "),a("h3",{attrs:{id:"把主线程还给-ui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把主线程还给-ui"}},[t._v("#")]),t._v(" 把主线程还给 UI")]),t._v(" "),a("p",[t._v("Worker 的应用场景, 本质上是从主线程中剥离逻辑, 让主线程专注于 UI 渲染. 这种架构设计并非 Web 技术上的独创。")]),t._v(" "),a("p",[t._v("Android 和 iOS 的原生开发中, "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.com%2Ftopic%2Fperformance%2Fthreads",target:"_blank",rel:"noopener noreferrer"}},[t._v("主线程负责 UI 工作"),a("OutboundLink")],1),t._v("; 前端领域热门的小程序, 实现原理上就是"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwechat-miniprogram.github.io%2Fkbone%2Fdocs%2Fguide%2Fprinciple.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("渲染和逻辑的完全分离"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/WP2RT6VBPtD5bpq3WaEpeQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Worker 现状"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6854573213297410062#heading-16",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Worker 文献综述"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/SCFk6FgtKQ8N-VrV6OmioA",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文搞懂 Web Worker(原理到实践)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7176788060619669565#heading-16",target:"_blank",rel:"noopener noreferrer"}},[t._v("梳理 Web Worker 及实战场景"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6948752328715403300#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅探 Web Worker 与 JavaScript 沙箱"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Bm-TI9K8Za8Ret22WucOFA",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文彻底了解Web Worker，十万、百万条数据"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/eX2dFf999GleZiarpKbdoA",target:"_blank",rel:"noopener noreferrer"}},[t._v("将 useReducer 应用于 Web Worker"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/ZK5tk1I4fZZ4SEETNtMsVA",target:"_blank",rel:"noopener noreferrer"}},[t._v("换一种风格理解 Chrome 浏览器渲染全过程"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);